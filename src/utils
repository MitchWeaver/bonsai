# vi:syntax=sh
# shellcheck shell=sh

msg()  {
    [ -z "$1" ] && read -r input && set -- "$input"
    printf "%s\n" "$prompt $*"
}
msg_no_nl()  {
    [ -z "$1" ] && read -r input && set -- "$input"
    printf "%s" "$prompt $*"
}
die()  { >&2 msg "error: $*" ; exit 1 ; }
warn() { >&2 msg "warning: $*" ; }

usage() {
printf "%s\n" \
"bonsai pkg mgr
 
commands:
-----------
add    | -a
del    | -d
relink | -r
search | -s
info   | -i
list   | -l
print  | -p
count  | -c
deps isinst"
}

# checks if a function is defined
# params: $func_name(s)
defined() {
    for arg ; do
        type "$arg" | grep 'is.*.function' || return 1
    done > /dev/null 2>&1
    unset arg
}
# checks if a command exists
# params: $command_name(s)
has() { 
    for arg ; do
        type "$arg" || return 1
    done > /dev/null 2>&1
    unset arg
}

# check if dir is empty
# params: dir
# return: 0 if true, 1 if false or not a dir
is_empty() {
    if rmdir "$1" 2> /dev/null ; then
        mkdir "$1"
        return
    else
        return 1
    fi
}

# params: $path
# return: 0 if path is a symlink and target exists
test_link() {
    if [ ! -L "$1" ] || [ ! -e "$1" ]; then
        return 1
    fi
}

# remove leading/trailing whitespace
trim() {
    set -- "${1#${1%%[! ]*}}"
    set -- "${1%${_##*[! ]}}"
    printf '%s\n' "$1"
}

# --- some coreutils in posix sh builtins ---
basename() { printf "%s" "${1##*/}" ; }
#dirname()  { printf "%s" "${1%/*}/" ; }

# print first line of a file
# (3600% speedup compared to `head -n 1` on small files)
headn1() {
    read -r line < "$1"
    echo "$line"
}

# print last line of a file
# (200% speedup compared to `tail -n 1` on small files)
tailn1() {
IFS="
"
file="$1"
set --
while read -r line ; do
    set -- "$@" "$line"
done < "$file"

shift $(($# - 1))
echo "$1"
}
# -------------------------------------------



# converts "bash#4.8" -> "bash"
pkgid2pkg() { printf '%s' "${1%%$delim*}" ; }

# cleans $pkgs tree of empty dirs and clears $work
# params: none
clean() {
    rm -rf "${work:?}"
    find "$pkgs" -type d ! -path "$pkgs" 2> /dev/null | \
            while read -r dir ; do
        rmdir "$dir" 2> /dev/null ||:
    done
    update_db
    unset dir
}

# returns if given $name is a metapkg
ismetapkg() {
    grep '^metapkg=true$' "$ports/$1/pkgfile" >/dev/null
    return $?
}

# prompts user for confirmation
# returns 1 on 'n' or bad input
# params: message to be printed
confirm() {
    if [ -z "$NO_PROMPT" ] ; then
        msg_no_nl "$confirm_prompt"
        read -r ans
        case "$ans" in
            y|"") ;; # "" is equivalent to user pressing enter
            *) return 1
        esac
        unset ans
    fi
}

# if we're using pkg mgr's built in gcc, make sure its valid/existant
# if its not -- check to see if we're trying to download one
# ... if not, we cannot compile packages -- error out
validate_gcc() {
    if [ ! -x "$gcc" ] ; then
        case $1 in
            *gcc*|core-system) ;;
            *) 
            if [ -e "$gcc" ] ; then
                die "No compiler toolchain has yet been installed.
         Try \`bonsai search gcc\` to find one."
            else
                die "World appears to still be linked as a chroot.
         Use --relink-world --pkgs=/src/pkgs to relink externally
         or without arguments to relink internally."
            fi
        esac
    fi
}

# check variables are still sane before operations
sanity_check() {
    [ -d "$root"     ]   || die "\$root is not a directory"
    [ -d "$bonsaihome" ] || die "\$bonsaihome is not a directory"
    [ -d "$pkgs"     ]   || die "\$pkgs is not a directory"
    [ -d "$ports"    ]   || die "\$ports is not a directory"
    [ -d "$sources"  ]   || die "\$sources is not a directory"
    [ -r "$bonsaidb" ]   || die "\$bonsaidb is not readable"
    [ "$delim"       ]   || die "\$delim is not set"
    [ "$gcc"         ]   || warn "\$gcc is not set"
    mkdir -p "$bonsaihome" "$pkgs" "$ports" "$sources" "$work"
}

bonsai() {
printf "%b\n" \
"
    \033[32m,####,
   \033[32m#######,  \033[32m,#####,
   \033[32m#####',#  \033[32m'######
    \033[32m''###'\033[33m';,,,'\033[32m###'
   \033[33m       ,;  ''''
   \033[33m      ;;;   \033[32m,#####,
   \033[33m     ;;;'  ,,;\033[32m;;###
   \033[33m     ';;;;''\033[32m'####'
   \033[33m      ;;;
   \033[33m   ,.;;';'',,,
   \033[33m  '     '\033[0m"
}
