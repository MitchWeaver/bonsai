# vi:syntax=sh
# shellcheck shell=sh

# search ports for given $name
search() {
    set -- $(find "$ports" ! -path "$ports" -type d -name "*$1*" | sort)
    [ "$1" ] || die "port $1 not found"
    for _p in $@ ; do
        _p="${_p##*/}"
        echo "${_p%.*}"
    done
}

# loads pkgfile for given $name
# assumes: $workdir in environment
load_pkgfile() {
    name="$1"
    pkg="$pkgs/$name"
    pkgfile="$ports/$name/pkgfile"
    export pkg name pkgfile
    [ -f "$pkgfile" ] || die "failed to load $name's pkgfile"
    . "$pkgfile"
    if ismetapkg "$name" ; then
        version=metapkg
        nostrip=true
    fi
    : "${source:=none}"
    pkgid="${name}${delim:=#}${version:=unknown}"
    pkgworkdir="$workdir/$name"
    export version source pkgid pkgworkdir nostrip
}

# unsets vars as not to persist from pkg to pkg
unload_pkgfile() {
    unset name pkgfile pkgid version source depends deps \
          md5 sha1 sha256 sha512 pkgworkdir workdir nolink nostrip
    unset -f prebuild build postbuild
}

# calculate dependencies and store them
# in $pkgdeps in the correct installation order
# params: $name
pkgdeps() {
    # remember the original package we're checking
    arg=$1

    dep_recurse() {
        # unset as not to carry over deps from previous pkg
        unset deps

        # source the dep's pkgfile
        [ -s "$ports/$1/pkgfile" ] || 
            die "pkgdeps(): could not source $1's pkgfile"
        . "$ports/$1/pkgfile"

        # recurse and find the dep's deps, skipping if already in list
        for dep in $deps ; do
            contains "$pkgdeps" " $dep " || dep_recurse $dep
        done

        # check if dep is not the main package stored in $arg
        # (do not display a package as a dep of itself)
        [ $1 = $arg ] || pkgdeps=" $pkgdeps $1 "
    }
    dep_recurse "$arg"

    # remove multiple whitespaces
    set -- $pkgdeps
    export pkgdeps="$*"

    unset dep deps arg
}

# show what packages depend on given port
# params: $name
rdeps() {
    # echo all packages that list $1 in their $deps
    depends() {
        find "$ports" -name pkgfile | while read -r _pkgfile ; do
            deps=""
            . "$_pkgfile"
            for dep in $deps ; do
                [ "$dep" = "$1" ] && echo "$_pkgfile"
            done
        done
    }

    deps="$(depends "$1")"

    for dep in $deps ; do
        deps="$deps $(depends "$dep")"
    done
   
    # 1. remove duplicates and white space
    # 2. convert $root/src/ports/$name/pkgfile -> $name
    set -- $(\
        for dep in $deps ; do
            printf '%s\n' $(basename $(dirname $dep)) $@
        done | sort -u \
    )
    msg "$*"

    unset deps dep
}


# print info about a given $name
portinfo() {
    [ "$2" ]    && die "info(): too many arguments"
    [ -z "$1" ] && die "info(): no argument provided"
    name="$1"
    pkgfile="$ports/$name/pkgfile"

    [ -f "$pkgfile" ] || die "addpkg(): could not source $name's pkgfile"
    . "$pkgfile"

    printf "%s\n%s\n%s\n%s\n%s\n" \
        "name:    $name" \
        "info:    ${info:=?}" \
        "version: ${version:=unknown}" \
        "source:  ${source:=?}" \
        "depends: ${deps:=none}"
    unset name pkgfile name info version source deps 
}

# print out the contents of a given $name's pkgfile
portcat() {
    [ "$2" ]    && die "portcat(): too many arguments"
    [ -z "$1" ] && die "portcat(): no argument provided"
    [ -f "$ports/$1/pkgfile" ] || die "pkgcat(): could not find $1's pkgfile"
    shellcat "$ports/$1/pkgfile"
}
