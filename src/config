loadconfig() {
    if [ "$config" ] ; then
        distrorc="$config"
    elif [ -f /src/"$PKG_MGR_NAME".rc ] ; then
        distrorc="/src/$PKG_MGR_NAME.rc"
    else 
        distrorc="${HOME}/.local/$PKG_MGR_NAME/src/$PKG_MGR_NAME.rc"
        [ ! -f "$distrorc" ] && create_skeleton_config
    fi
    . "$distrorc" || die "loadconfig(): could not source config"

    if [ "$_root" ] ; then
        root="$_root"
    fi
    
   
    # set default variables if not in config file
    # and make necessary directories
    mkdir -p "${root:="${HOME}/.local/distro"}" \
             "${distrohome:="$root/src"}" \
             "${pkgs:="$distrohome/pkgs"}" \
             "${ports:="$distrohome/ports"}" \
             "${sources:="$distrohome/sources"}" \
             "${work:="$distrohome/work"}"

    : "${distrodb:="$distrohome/distro.db"}"

    [ "$_gcc" ] && gcc="$_gcc"

    update_db
    sanity_check
    unset _root _gcc _config
}

# creates a skeleton config
# params: $path
create_skeleton_config() {
    if [ "$1" ] ; then
        if [ ! -e "$1" ] ; then
            path="$1"
        else
            die "create_skeleton_config(): Refusing to overwrite $1"
        fi
    else
        path="${HOME}/.local/$PKG_MGR_NAME/src"
        mkdir -p "$path"
        echo "copying default config to ~/.local/$PKG_MGR_NAME/$PKG_MGR_NAME.rc"
    fi
cat > "$path/$PKG_MGR_NAME".rc << "EOF"
# distro root
root=${HOME}/.local/distro

# compiling
jobs=$(grep -c 'cpu cores' /proc/cpuinfo)
gcc="$root/bin/gcc"

# options
makeflags=''
keep_tarballs=true
mans=true   # install man pages?
docs=false  # install extra documentation?
nls=false   # provide native-language-support?
quiet=false # configure/make silently without warnings?
debug=false # compile in debugging tools/information?
tests=false # compile included tests?
prompt='→'  # msg prompt

# package/version delimiter
# can be any character or series of characters, however:
# * must be sane (no $, `, / etc)
# * cannot be '-' due to the character often being in pkg names
# * commonly used: #@?!*†¤§≡
delim='#'

# flags
# warning: do not change these unless you seriously know what you're doing.
cflags="-static --static -s -w -Os -no-pie -pipe -march=native -ffast-math"
cflags="$cflags -Wl,--gc-sections -fstack-protector-strong"
ldflags="-static --static -s -fdata-sections -ffunction-sections"
cppflags='-static --static'
cxxflags="$cflags"
EOF
}
# vi:syntax=sh
# shellcheck shell=sh
