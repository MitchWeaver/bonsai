# create symlinks for a port
# params: $pkgname [$pkgs]
# * If $pkgs is not provided, use the config's
#
# * If it is provided, symlink targets using this value.
#   This is useful for bootstrapping, as after chrooting in
#   if you had not done this all of your symlinks would be broken.
link_pkg() {
    pkgname="$1"

    case $# in
        1) _pkgs="$pkgs" ;;
        2) _pkgs="$2" ;;
        *) die "link_pkg(): invalid number of arguments"
    esac

    [ -d "$pkgs"/$pkgname ] || return

    cd "$root" || die "link_pkg(): unable to cd to $root"
    msg 'creating symlinks...'

    for dir in bin sbin share include etc lib libexec ; do
        [ -d "$pkgs"/$pkgname/$dir ] || continue

        # recursively create pkg subdirectories in
        # equivalent $root subdirectories
        # example: $pkgname/lib/pkgconfig -> $root/lib/pkgconfig
        find "$pkgs"/$pkgname/$dir ! -path "*$dir" \
                -type d 2> /dev/null | while read -r subdir ; do
            mkdir -p "${subdir#$pkgs/$pkgname/}"
        done

        # recursively link all files
        # example: $pkgname/include/asm/*.h -> $root/include/asm/*.h
        find "$pkgs"/$pkgname/$dir ! -path "*share/*man*" \
                -type f -o -type l 2> /dev/null | while read -r file ; do
            file="${file#$pkgs/$pkgname/}"
            ln -sf "$_pkgs/$pkgname/$file" $file
        done
    done

    $mans && # only link mans if config boolean is true
    if [ -d "$pkgs"/$pkgname/share/man ] ; then
        seq -f "man%g" -s " " 1 8 | while read -r manX ; do
            find "$pkgs"/$pkgname/share/man/$manX \
                    ! -path "*/$manX" 2> /dev/null | while read -r man ; do
                ln -sf "$_pkgs/$pkgname/share/man/$manX/${man##*/}" \
                    "${man#$pkgs/$pkgname/}"
            done
        done
    fi
    unset dir subdir file manX man _pkgs
}

# relinks every package installed
# used to fix broken / inconsistent symlinks
#
# also is used to bootstrap systems under a different $root
#
# params: [--pkgs=]
#
# * If param is not provided, simply relink all using the config's $pkgs
#
# * If param is provided, relink the world using the given $pkgs location
#   See comment heading of link_pkg() for details.
relink_world() {

    case $# in
        0)
            sanity_check
            relink_pkgs="$pkgs"
            msg 'relinking world...'
            ;;
        1)
            relink_pkgs="${1#--pkgs=}"
            msg "relinking world with \$pkgs=$relink_pkgs ..."
            ;;
        *)
            die "relink_all(): invalid number of arguments"
    esac

    newline

    listpkgs | while read -r pkgid ; do
        link_pkg "$(pkgid2pkg "$pkgid")" "$relink_pkgs"
    done || die "relink_world(): linking failed"

    newline
    msg 'done!'

    unset relink_pkgs
}
# vi:syntax=sh
