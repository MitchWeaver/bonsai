msg()  {
    [ $# -eq 0 ] && read -r input && set -- "$input"
    printf "%s\n" "$prompt $*"
}
msg_no_nl()  {
    [ $# -eq 0 ] && read -r input && set -- "$input"
    printf "%s" "$prompt $*"
}
die()  { >&2 msg "error: $*" ; exit 1 ; }
warn() { >&2 msg "warning: $*" ; }

usage() {
    printf "%s\n\n%s\n" "$PKG_MGR_NAME pkg mgr" \
"commands:
-----------
add    | -a
del    | -d
search | -s
list   | -l
isinst | -i
count  | -c"
exit
}

# checks if a function is defined
# params: $func_name(s)
defined() {
    for arg ; do
        type "$arg" | grep 'is.*.function' || return 1
    done > /dev/null 2>&1
    unset arg
}
# checks if a command exists
# params: $command_name(s)
has() { 
    for arg ; do
        type "$arg" || return 1
    done > /dev/null 2>&1
    unset arg
}

# check if dir is empty
# params: dir
# return: 0 if true, 1 if false or not a dir
is_empty() {
    if rmdir "$1" 2> /dev/null ; then
        mkdir "$1"
        return
    else
        return 1
    fi
}

# params: $path
# return: 0 if path is a symlink and target exists
test_link() {
    if [ ! -L "$1" ] || [ ! -e "$1" ]; then
        return 1
    fi
}

basename() { printf "%s" "${1##*/}" ; }

# remove leading/trailing whitespace
trim() {
    set -- "${1#${1%%[! ]*}}"
    set -- "${trim%${_##*[! ]}}"
    printf '%s\n' "$1"
}

# converts "bash#4.8" -> "bash"
pkgid2pkg() { printf '%s' "${1%%$delim*}" ; }

# cleans $pkgs tree of empty dirs and clears $work
# params: none
clean() {
    rm -rf "${work:?}"
    find "$pkgs" -type d ! -path "$pkgs" 2> /dev/null | \
            while read -r dir ; do
        rmdir "$dir" 2> /dev/null ||:
    done
    update_db
    unset dir
}

# if we're using pkg mgr's built in gcc, make sure its valid/existant
# if its not -- check to see if we're trying to download one
# ... if not, we cannot compile packages -- error out
validate_gcc() {
    if [ ! -x "$gcc" ] ; then
        case $1 in
            core-system|*gcc*|bore) ;;
            *) 
            if [ -e "$gcc" ] ; then
                die "No compiler toolchain has yet been installed.
         Try \`$PKG_MGR_NAME search gcc\` to find one."
            else
                die "World appears to still be linked as a chroot.
         Use --relink-world to relink externally."
            fi
        esac
    fi
}

# check variables are still sane before operations
sanity_check() {
    [ -d "$root"     ] || die "\$root is not a directory"
    [ -d "$borehome" ] || die "\$borehome is not a directory"
    [ -d "$pkgs"     ] || die "\$pkgs is not a directory"
    [ -d "$ports"    ] || die "\$ports is not a directory"
    [ -d "$sources"  ] || die "\$sources is not a directory"
    [ -r "$boredb"   ] || die "\$boredb is not readable"
    [ "$delim"       ] || die "\$delim is not set"
    [ "$gcc"         ] || warn "\$gcc is not set"
    jobs="${jobs:=1}"
    mkdir -p "$borehome" "$pkgs" "$ports" "$sources" "$work"
}

# check if all dependencies are met on startup
check_deps() {
    for prog in gzip bzip2 xz ; do
        has $prog || warn "$prog is not installed. Some ports may not extract."
    done
    has curl || warn "curl is not installed. Some ports may not download."
    has patch || warn "patch is not installed. Some ports may not compile."
    unset prog
}

gccinfo() {
    getflags
    printf "%s\n\n" "version: $($gcc -dumpversion)"
    printf '%s\n\n' "arch: $($gcc -dumpmachine)"
    printf "%s\n\n" "sysroot: $($gcc -print-sysroot)"
    LIBRARY_PATH="$LIBRARY_PATH" $gcc -print-search-dirs
    LIBRARY_PATH="$LIBRARY_PATH" $gcc -E -Wp,-v -xc /dev/null
}
# vi:syntax=sh
# shellcheck shell=sh
