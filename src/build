# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# build                  http://github.com/bonsai-linux/bonsai
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# vi:syntax=sh
# shellcheck shell=sh
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

# runs build() method inside a pkgfile
run_build() { 
    cd "$pkgworkdir" || die "build(): unable to cd to $pkgworkdir"
    msg "building $name..."

    getflags

    # manually track configure dependencies
    [ -f missing ] && :>missing
    [ -f build-aux/missing ] && :>build-aux/missing

    if defined prebuild ; then
        prebuild || die "$name prebuild() failed"
    elif ! ismetapkg $name ; then
        bonsai_patch || die "$name generic prebuild() failed"
    fi

    cd "$pkgworkdir"
    if defined build ; then
        build || die "$name build() failed"
    elif ! ismetapkg $name ; then
        case "$name" in
            *-bin) ;; # do not try to compile if binary package
            *) generic_build || die "$name generic_build() failed"
        esac
    fi

    cd "$pkgworkdir"
    if defined postbuild ; then
        postbuild || die "$name postbuild() failed"
    fi

    # strip bins/libs, making sure its not disabled 
    # in either the pkgfile or the user's config
    if [ "$nostrip" != true ] && [ "$strip_bins" = true ] ; then
        msg 'stripping binaries...'
        find "$pkg"/bin -type f 2>/dev/null | while read -r file ; do
            strip --strip-all "$file" 2>/dev/null ||:
        done &
        find "$pkg"/lib -type f 2>/dev/null | while read -r file ; do
            strip --strip-unneeded "$file" 2>/dev/null ||:
        done &
        wait
    fi

    # unset in case we are adding multiple packages
    unset -f prebuild build postbuild
}

# convenience function, tries to find all *.patch
# in the top-level $WORK/$name directory and apply them
bonsai_patch() {
    find . ! -name . -prune -name "*.patch" | while read -r patch ; do
        patch -u -f -l -p0 <"$patch" || die "$patch failed"
    done
}

# if --path= param is provided, use ./"$path"/configure
# instead of assumed "./configure" (ie ./"$PWD"/configure)
# possible params: --path=""
bonsai_configure() {
    case "$1" in
        --path=*) cfpath="${1#--path=*}" ; shift ;;
               *) cfpath="$PWD"
    esac

    # try to enable as many options as possible
    # if they are allowed in the configure script
    cfhelp="$(sh "$cfpath"/configure --help | tee "$WORK"/$name/cfhelp)"
    cfflags=

    # save flags from pkgfile so they don't get overwritten by set
    pkg_cfflags="$@"

    YES() {
        case "$cfhelp" in
            *" --enable-$1 "*|*" --disable-$1 "*)
                cfflags="$cfflags --enable-$1 "
                msg "adding flag: --enable-$1 "
                ;;
            *" --with-$1 "*|*" --without-$1 "*)
                cfflags="$cfflags --with-$1 "
                msg "adding flag: --with-$1 "
        esac
    }
    NO() {
        case "$cfhelp" in
            *" --disable-$1 "*|*" --enable-$1 "*)
                cfflags="$cfflags --disable-$1 "
                msg "adding flag: --disable-$1 "
                ;;
            *" --without-$1 "*|*" --with-$1 "*)
                cfflags="$cfflags --without-$1 "
                msg "adding flag: --without-$1 "
        esac
    }
    SET() {
        case "$cfhelp" in
            *" --$1="*)
                cfflags="$cfflags --$1=$2 "
                msg "adding flag: --$1=$2 "
                ;;
            *" --$1 "*)
                cfflags="$cfflags --$1 "
                msg "adding flag: --$1 "
        esac
    }

    while read -r line ; do
        set -- $line
        case $1 in
            SET) SET $2 $3 ;;
            YES) YES $2 ;;
            NO)  NO  $2 ;;
        esac
    done <"$CONFIG"/autotools.cfg

    # store flags used to a file for convenience
    for flag in $cfflags $pkg_cfflags ; do
        echo "$flag" >>"$WORK"/$name/cfflags
    done

    sh "$cfpath"/configure $cfflags $pkg_cfflags || 
        die "configure failed for $name"
}

bonsai_make() {
    make -j${JOBS:-1} $([ "$VERBOSE" ] && echo V=1) \
    CC="$CC" cc="$CC" CXX="$CXX" cxx="$CXX" \
    LIBTOOL="$LIBTOOL" MAKE="make LIBTOOL='$LIBTOOL'" PKG_CONFIG="$PKG_CONFIG" \
    DESTDIR="$DESTDIR" PREFIX="$PREFIX" prefix="$PREFIX" DOCDIR="$DOCDIR" \
    BINDIR="$BINDIR" SBINDIR="$BINDIR" LIBDIR="$LIBDIR" LIBEXECDIR="$LIBEXECDIR" \
    libdir="$LIBDIR" bindir="$BINDIR" sbindir="$BINDIR" libexecdir="$LIBEXECDIR" \
    MAKEINFO=false MKDIR_P="$MKDIR_P" "$@" || die "make $* failed for $name"
}

# run if pkgfile doesn't define a custom build()
generic_build() {
    if [ -f configure ] ; then
        bonsai_configure || return 1
    elif [ -f autogen.sh ] ; then
        sh autogen.sh || return 1
        bonsai_configure || return 1
    fi
    bonsai_make || return 1
    bonsai_make install || return 1
}

getflags() {
    # import user's flags and export them
    isinst @cfg >/dev/null && . "$CONFIG"/build.cfg

    case "$1" in
        --no-static)
            LIBTOOL=/bin/slibtool
            PKG_CONFIG=/bin/pkgconf
            ;;
        *)
            CFLAGS="$CFLAGS $STATIC_CFLAGS"
            LDFLAGS="$LDFLAGS $STATIC_LDFLAGS"
            LIBTOOL=/bin/slibtool-static
            PKG_CONFIG=/bin/pkgconf-static
    esac

    # fix slibtool/pkgconf if we're bootstrapping
    test -x /bin/slibtool >/dev/null 2>&1 || LIBTOOL=libtool
    test -x /bin/pkgconf  >/dev/null 2>&1 || PKG_CONFIG=pkg-config

    # system flags
    export DESTDIR="$PKGS/$name" PREFIX=/ prefix=/ DOCDIR="$PREFIX"/sucks \
    SHELL=/bin/sh HOSTCC="$CC" cc="$CC" GREP=grep FGREP=fgrep EGREP=egrep \
    SED=sed FIND=find AWK=awk TAR=tar YACC=yacc MKDIR_P='install -d'

    # user cfg flags
    export CC CXX AR AS RANLIB STRIP LIBTOOL PKG_CONFIG JOBS \
           CFLAGS LDFLAGS JOBS LIBRARY_PATH LD_LIBRARY_PATH CPATH \
           PKG_CONFIG_PATH BINDIR LIBDIR SBINDIR LIBEXECDIR MANDIR 
}
