loadconfig() {
    if [ "$config" ] ; then
        borerc="$config"
    elif [ -f /src/$PKG_MGR_NAME.rc ] ; then
        borerc="/src/$PKG_MGR_NAME.rc"
    else 
        borerc="${HOME}/.local/$PKG_MGR_NAME/src/$PKG_MGR_NAME.rc"
        [ ! -f "$borerc" ] && create_skeleton_config
    fi
    . "$borerc" || die "loadconfig(): could not source config"

    [ "$_root" ] && root="$_root"
    [ "$_gcc" ] && gcc="$_gcc"

    update_db
    sanity_check
    unset _root _gcc _config
}

# creates a skeleton config
# params: $path
create_skeleton_config() {
    if [ "$1" ] ; then
        if [ ! -e "$1" ] ; then
            path="$1"
        else
            die "create_skeleton_config(): Refusing to overwrite $1"
        fi
    else
        path="${HOME}/.local/$PKG_MGR_NAME/src"
        mkdir -p "$path"
        echo "copying default config to ~/.local/$PKG_MGR_NAME/$PKG_MGR_NAME.rc"
    fi
cat > "$path"/$PKG_MGR_NAME.rc << "EOF"
# bore variables
root=${HOME}/.local/bore
borehome="$root"/src
boredb="$borehome"/bore.db
pkgs="$borehome"/pkgs
ports="$borehome"/ports
sources="$borehome"/sources
work="$borehome"/work

# compiling
jobs=$(grep -c 'cpu cores' /proc/cpuinfo)
tcc="$root/bin/tcc"
gcc="$root/bin/gcc"

# flags
makeflags='-s'
cflags='-static --static -Os -w -s -pipe -Wl,--gc-sections'
ldflags='-static --static -fdata-sections -ffunction-sections'
cppflags='-static --static'
cxxflags='-static --static'
pkgcfgflags='pkg-config --static'

# downloads
curl_opts='-# --ssl'
git_opts='-q --progress --depth 1'
keep_tarballs=true

# options
mans=true   # install man pages?
docs=false  # install extra documentation?
nls=false   # provide native-language-support?
quiet=true  # configure/make silently?
debug=false # compile in debugging tools/information?
prompt='â†’'  # msg prompt
delim=' : '   # package/version delimiter
EOF
}
