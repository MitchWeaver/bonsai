# vi:syntax=sh
# shellcheck shell=sh

# Helper to get around all things that suck.
sucks() {
    # GNU programs have the most insane dependency tracking I have ever seen.
    # To check for dependencies, they often simply try to run the program
    # and if it has a -gt 0 exit code, the dependency must not be in $PATH.
    #
    # This breaks all kinds of things, namely if we are running under `set -e`
    # As a workaround, just manually track depedencies -- clear the files.
    [ -f build-aux/missing ] && :> build-aux/missing
    [ -f missing ] && :> missing

    # Configure scripts often try to run programs with certain flags
    # to see if they support different things.
    # They often don't even use those flags in the end...
    # If they do, they can be patched on a per-port basis.
    # Usually to avoid these checks all you need to is have their name
    # in the environment in all caps like so:
    : "${GREP:=grep}" "${SED:=sed}" "${AWK:=awk}" "${TAR:=tar}" "${FIND:=find}"
    export GREP SED AWK TAR FIND

    # musl-libc does not have ldconfig. To stop some makefiles from 
    # exiting if its not found, add a bogus script to $PATH to avoid errors.
    mkdir -p .bogus
    echo '#!/bin/sh' > .bogus/ldconfig
    chmod +x .bogus/ldconfig
    export PATH="$PATH:\"$PWD\"/.bogus"
}

# common fixes needed by programs that assume use of glibc
# putting things here removes the need for mass patching
musl_fixes() {
    # musl splits glibc's <sys/types.h> into 
    # <sys/types.h> and <sys/sysmacros.h>
    find . -type f -name '*.c' | while read -r file ; do
        {
            set -- "$(gettemp)"
            sed 's|#include <sys/types.h>|#include <sys/types.h>\n#include <sys/sysmacros.h>|' "$file" > "$1"
            mv -f "$1" "$file"
        } &
    done
    wait
    unset file
}

# remove junk files from given package
# params: $name
clear_junk() {
    # garbage gnu texinfo files
    rm -r "${pkgs:?}/${1:?}/share/info" 2>/dev/null ||:

    # extraneous (and huge) html docs
    rm -r "${pkgs:?}/${1:?}/share/doc" 2>/dev/null ||:

    # remove man pages if user wishes, (mans=false in bonsai.rc)
    $mans || rm -r "${pkgs:?}/${1:?}/share/man" 2>/dev/null ||:

    # any specific things left over that suck
    rm -rf "${pkgs:?}/${1:?}/sucks" 2>/dev/null ||:
}
