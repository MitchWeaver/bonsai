loadconfig() {
    if [ "$config" ] ; then
        borerc="$config"
    elif [ -f ${HOME}/.local/$0/src/$0.rc ] ; then
        borerc="${HOME}/.local/$0/src/$0.rc"
    elif [ -f /src/$0.rc ] ; then
        borerc="/src/$0.rc"
    fi
    . "$borerc" || die "loadconfig(): could not source config"

    [ "$_root" ] && root="$_root"
    [ "$_gcc" ] && gcc="$_gcc"

    update_db
    check_vars
}

check_vars() {
    [ "$root" ]     || die "loadconfig(): \$root failed to set"
    [ "$borehome" ] || die "loadconfig(): \$borehome failed to set"
    [ "$boredb" ]   || die "loadconfig(): \$boredb failed to set"
    [ "$pkgs" ]     || die "loadconfig(): \$pkgs failed to set"
    [ "$ports" ]    || die "loadconfig(): \$ports failed to set"
    [ "$sources" ]  || die "loadconfig(): \$sources failed to set"
    [ "$work" ]     || die "loadconfig(): \$work failed to set"
    [ "$delim" ]    || die "loadconfig(): \$delim failed to set"
    [ "$gcc" ]      || warn "loadconfig(): \$gcc failed to set"
    [ "$tcc" ]      || warn "loadconfig(): \$tcc failed to set"
    [ "$jobs" ]     || jobs=1
}

# creates a skeleton config
# params: $path
create_skeleton_config() {
    if [ "$1" ] ; then
        if [ ! -e "$1" ] ; then
            path="$1"
        else
            die "create_skeleton_config(): Refusing to overwrite $1"
        fi
    else
        path='.'
        mkdir -p ${HOME}/.local/$0/src
        msg "creating skeleton config \~/.local/$0/${0}"
    fi
cat > "$path"/$0.rc.skel << "EOF"
# bore variables
root=${HOME}/.local/bore
borehome="$root"/src
boredb="$borehome"/bore.db
pkgs="$borehome"/pkgs
ports="$borehome"/ports
sources="$borehome"/sources
work="$borehome"/work

# compiling
jobs=$(grep -c 'cpu cores' /proc/cpuinfo)
tcc='tcc -w'
gcc='gcc -w -s'

# flags
makeflags='-s'
cflags='-static --static -Os -s -pipe -Wl,--gc-sections'
ldflags='-static --static -fdata-sections -ffunction-sections'
cppflags='-static --static'
cxxflags='-static --static'
pkgcfgflags='pkg-config --static'

# downloads
curl_opts='-# --ssl'
git_opts='-q --progress --depth 1'
keep_tarballs=true

# options
mans=true   # install man pages?
docs=false  # install extra documentation?
nls=false   # provide native-language-support?
quiet=true  # configure/make silently?
debug=false # compile in debugging tools/information?
prompt='â†’ ' # msg prompt
delim='-'   # package/version delimiter
EOF
}
