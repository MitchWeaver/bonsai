# vi:syntax=sh
# shellcheck shell=sh

initglobals() {
    # unset any env variables that could interfere
    unset cc CC CFLAGS LDFLAGS CPPFLAGS CXXFLAGS \
        LIBRARY_PATH CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH \
        OBJC_INCLUDE_PATH PKG_CONFIG INCLUDE LD_LIBRARY_PATH
    
    PKG_CONFIG_PATH="$root/lib/pkgconfig:/lib/pkgconfig"
    PATH="$root/bin:$PATH"
    LC_ALL=C
    LANG=C
    export PATH PKG_CONFIG_PATH LC_ALL LANG
}

main() {
    [ "$1" ] || { bonsai ; exit ; }

    # assign any special arguments
    [ "$1" = --debug ]   && { set -x ; shift ; }
    [ "$1" = --errexit ] && { set -e ; shift ; }
    [ "$1" = --config ]  && { config="${1#--config=}" ; shift ; }
    [ "$1" = --root ]    && { root="${1#--root=}"     ; shift ; }
    [ "$1" = --gcc ]     && { gcc="${1#--gcc=}"       ; shift ; }
    [ "$1" = -y ]  && { NO_PROMPT=true ; export NO_PROMPT ; shift ; }

    # statements that should be ran before loading config
    case "$1" in
        --skeleton|skel) create_skeleton_config "$2" ; exit $? ;;
        --help|-h)  usage ; exit
    esac

    # load config and setup the environment
    loadconfig
    initglobals
    create_root_dirs
    setup_etc

    arg() {
        # statements that exit after running once
        case "$1" in
            --relink-world) relink_world "$2" ; exit $? ;;
            chroot)    enter_chroot  ; exit $? ;;
            list|-l)   listpkgs      ; exit $? ;;
            search|-s) search "$2"   ; exit $? ;;
            info|-i)   portinfo "$2" ; exit $? ;;
            print|-p)  portcat "$2"  ; exit $? ;;
            count)     countpkgs     ; exit $? ;;
            add|-a)
                shift
                addpkg "$@"
                exit $?
                ;;
            del|-d)
                shift
                while [ "$1" ] ; do
                    delpkg "$1"
                    shift
                done
                ;;
            relink|-r)
                shift
                while [ "$1" ] ; do
                    linkpkg "$1"
                    shift
                done
                ;;
            isinst)
                shift
                while [ "$1" ] ; do
                    isinst "$1"
                    shift
                done
                ;;
            deps)
                pkgdeps "$2"
                if [ "$pkgdeps" ] ; then
                    msg "$pkgdeps"
                    exit $?
                else
                    msg "port $2 has no dependencies"
                    exit 1
                fi
                ;;
            *)
                
                if [ "$1" ] ; then
                    # If none matched and there is an argument,
                    # we must be adding a package
                    # and omitting the 'add' (convenience).
                    # recurse again, adding the 'add' argument
                    arg add "$@"
                else
                    # otherwise must have no arguments
                    # just print a pretty tree
                    bonsai
                fi
        esac
    }
    arg "$@"
}
