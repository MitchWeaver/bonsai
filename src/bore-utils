msg()  {
    [ $# -eq 0 ] && read -r input && set -- "$input"
    printf "%s\n" "$prompt $*"
}
die()  { >&2 msg "error: $*" ; exit 1 ; }
warn() { >&2 msg "warning: $*" ; }

usage() {
    printf "%s\n\n%s\n" "$PKG_MGR_NAME pkg mgr" \
"commands:
-----------
add    | -a
del    | -d
search | -s
list   | -l
isinst | -i
count  | -c"
exit
}

# checks if a function is defined
# params: $func_name(s)
defined() {
    for arg ; do
        type $arg | grep 'is.*.function' || return 1
    done > /dev/null 2>&1
    unset arg
}
# checks if a command exists
# params: $command_name(s)
has() { 
    for arg ; do
        type $arg || return 1
    done > /dev/null 2>&1
    unset arg
}

# check if dir is empty
# params: dir
# return: 0 if true, 1 if false or not a dir
is_empty() {
    if rmdir "$1" 2> /dev/null ; then
        mkdir "$1"
        return
    else
        return 1
    fi
}

# params: $path
# return: 0 if path is a symlink and target exists
test_link() {
    if [ ! -L "$1" ] || [ ! -e "$1" ]; then
        return 1
    fi
}

basename() { printf "%s" "${1##*/}" ; }

# converts "bash#4.8" -> "bash"
pkgid2pkg() { printf '%s' "${1%%$delim*}" ; }

# cleans $pkgs tree of empty dirs and clears $work
# params: none
clean() {
    sanity_check && rm -rf "$work"
    find "$pkgs" -type d ! -wholename "$pkgs" 2> /dev/null | \
            while read -r dir ; do
        rmdir "$dir" 2> /dev/null
    done
    update_db
    unset dir
}

# check variables are still sane before deleting anything
sanity_check() {
    [ "$root" ]     || die "\$root is not set"
    [ "$borehome" ] || die "\$borehome is not set"
    [ "$boredb" ]   || die "\$boredb is not set"
    [ "$pkgs" ]     || die "\$pkgs is not set"
    [ "$ports" ]    || die "\$ports is not set"
    [ "$sources" ]  || die "\$sources is not set"
    [ "$work" ]     || die "\$work is not set"
    [ "$delim" ]    || die "\$delim is not set"
    [ "$gcc" ]      || warn "\$gcc is not set"
    jobs="${jobs:=1}"
    mkdir -p "$borehome" "$pkgs" "$ports" "$sources" "$work"
}

# check if all dependencies are met on startup
check_deps() {
    for prog in cat cp find grep ln ls mkdir mv rm rmdir \
                sort sed tar wc file gcc make ; do
        has $prog || die "required program $prog is not available"
    done
    for prog in gzip bzip2 xz ; do
        has $prog || warn "$prog is not installed. Some ports may not extract."
    done
    has git || warn "git is not installed. Some ports may not download."
    has curl || warn "curl is not installed. Some ports may not download."
    has patch || warn "patch is not installed. Some ports may not compile."
    unset prog
}

gccinfo() {
    getflags
    printf "%s\n\n" "version: $($gcc -dumpversion)"
    printf '%s\n\n' "arch: $($gcc -dumpmachine)"
    printf "%s\n\n" "sysroot: $($gcc -print-sysroot)"
    LIBRARY_PATH="$LIBRARY_PATH" $gcc -print-search-dirs
    LIBRARY_PATH="$LIBRARY_PATH" $gcc -E -Wp,-v -xc /dev/null
}
# vi:syntax=sh
