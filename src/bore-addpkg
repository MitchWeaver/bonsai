# adds a port
# params: $name
addpkg() {
    [ "$1" ] || die "addpkg(): no pkg given"
    is_empty "$ports" && die "addpkg(): no ports found"

    for pkg in "$@" ; do
        isinst "$pkg" > /dev/null &&
            die "port $pkg is already installed"
    done

    # params: $name
    load_pkgfile() {
        name="$1"
        pkg="$pkgs"/"$name"
        pkgfile="$ports/$name/pkgfile"
        export pkg name pkgfile

        [ -s "$pkgfile" ] || die "addpkg(): could not source $name's pkgfile"
        . "$pkgfile"
        ismetapkg "$name" && version=metapkg
        : "${version:=unknown}"
        pkgid="${name}${delim}${version}"
        export version source pkgid
    }

    # unsets vars as not to persist from pkg to pkg
    unload_pkgfile() {
        unset pkgname pkgfile pkgid version depends deps
        unset -f prebuild build postbuild
    }

    # prompts user y/n to install packages
    # returns 1 on 'n' or bad input
    prompt_user() {
        # prompt user before continuing
        warn "these packages will be installed:"
        # note: $dep_needed is padded by spaces
        printf "\n  %s\n\n" "$1"
        if [ -z "$NO_PROMPT" ] ; then
            msg_no_nl "continue? (y/n): "
            read -r ans
            case "$ans" in
                y|"") ;; # "" is equivalent to user pressing enter
                *) return 1
            esac
            unset ans
        fi
    }

    # adds the given $name
    add() {
        ismetapkg "$name" || validate_gcc $1

        # clear any work from previous build
        rm -rf "${work:?}" 2>/dev/null ||:

        unload_pkgfile
        load_pkgfile "$1"

        if isinst "$name" >/dev/null ; then
            msg "port $name is already installed"
            unload_pkgfile
            return 1
        fi

        case "$source" in
            # if meta package, will not have a source
            # do not try to download
            ""|none) ;;
            *)
                get
                cd "$work/$name" || die "addpkg(): unable to cd to $work/$pkgid"
                mkdir -p "$pkgs/$name"
                trap 'rmdir $pkgs/$name' INT TERM
        esac

        run_build "$name" || die "$name failed to build"

        if [ -d "$pkgs/$name" ] ; then
            linkpkg "$name" || die "$name failed to link"
            clear_junk "$name"
        fi

        add_db "$name" "$version"
        msg "$name installed!"

        sanity_check && [ -d "${work}/$pkgid" ] && rm -rf "${work:?}/$pkgid"
        clean
        trap - INT TERM
        unload_pkgfile
    }
    
    # the packages asked to install
    main_packages="$@"
    # clear array, we will use it to build the list
    set --

    for mainpkg in $main_packages ; do
        # grab initial package variables
        load_pkgfile "$mainpkg"

        # search for dependencies, the value is stored in $pkgdeps
        pkgdeps "$mainpkg"

        # add deps to list, before the main package
        case "$pkgdeps" in
            # if deps is unset or empty string, there are no deps
            "") ;;
            "* *") ;;
            *) for dep in $pkgdeps ; do
                   isinst "$dep" > /dev/null || set -- "$@ $dep"
               done
        esac
        set -- "$@ $mainpkg"
        unload_pkgfile
    done

    # prompt before continuing
    prompt_user "$*" || return 1

    for pkg in $@ ; do
        add "$pkg"
    done || die "failed to install $port"

    unset main_packages pkg dep
    unset -f load_pkgfile unload_pkgfile prompt_user add
}
# vi:syntax=sh
# shellcheck shell=sh
