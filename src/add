# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Package Installation   http://github.com/bonsai-linux/bonsai
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

add() {
    # packages we have been asked to add
    mainpkgs=$*

    # clear the array, we will use it to build the list
    set --

    for p in $mainpkgs ; do
        # grab initial package variables
        loadpkgfile "$p"

        # search for dependencies, the value is stored in $pkgdeps
        pkgdeps "$p"

        # add deps to list, before the main package
        case $pkgdeps in
            ""|"* *") ;; # if unset or empty string, there are no deps
            *)
                for dep in $pkgdeps ; do
                    # if dep is not installed, schedule it to be added
                    if ! isinst "$dep" ; then
                        contains "$*" " $dep " || set -- "$* $dep"
                    fi
                done
        esac

        # once all dependencies have been calculated, append the main package
        set -- "$* $p"

        # remove variables from the environment
        unloadpkgfile
    done

    # now that we have the correct dependency-tree calculated,
    # add all of the arguments
    #
    # splitting on '$@' is intentional for the loop
    # shellcheck disable=SC2068
    for p in $@ ; do
        # start back at $WORK directory as $workdir may get deleted
        cd "$WORK" || die "couldn't cd to $WORK"

        # warn if package is being reinstalled
        isinst "$p" && die "$p is already installed"

        # load package variables into the environment
        loadpkgfile "$p"

        # clear old working directory should it exist
        rm -rf -- "$workdir" 2>/dev/null ||:
        mkdir -p "$workdir"

        # download sources and copy to $workdir
        if [ -f "$portdir"/sources ] ; then
            mkdir -p "$SOURCES/$pkgstring"
            get
        fi

        # build
        run_build

        # after successful build, create the symlinks in the root
        linkpkg

        # remove our build dir
        rm -rf -- "$workdir"

        msg "$name installed"

        # remove package variables from the environment
        unloadpkgfile
    done
}

# 1. downloads all remote files to $SOURCES/$pkgstring if needed
# 2. copies files, both local and remote, as specified to $workdir
get() {
    while read -r file sum ; do
        case $file in
            *'://'*)
                # must be a remote file
                msg "downloading ${file##*/}"

# curl cannot handle '#' in file paths and I cannot figure
# out how to fix this without patching it.
#
# as a shitty workaround use '-' as the delimitor for $SOURCES dirs
IFS='#' read -r ppath pver <<EOF
$SOURCES/$pkgstring
EOF
                outfile=$ppath-$pver/${file##*/}

                if [ -f "$outfile" ] ; then
                    # if file exists, it may be a partial download
                    # try to continue the download
                    if ! chksum "$outfile" "$sum" ; then
                        dl "$file" "$outfile"
                        chksum "$outfile" "$sum" || die 'checksum mismatch!'
                    fi
                else
                    dl "$file" "$outfile"
                    chksum "$outfile" "$sum" || die 'checksum mismatch!'
                fi
                extract "$outfile" "$workdir"
                ;;
            *)
                # no protocol specified, must be a local file.
                # checksum it just as we would a remote file, then copy it
                chksum "$portdir/$file" "$sum" || die 'checksum mismatch!'
                # if file is in a dir, first create the dir
                [ -d "$portdir/${file%%/*}" ] && mkdir -p "$workdir/${file%%/*}"
                cp -f "$portdir/$file" "$workdir/$file"
        esac
    done <"$portdir"/sources
}

dl() { curl -#fLC - --retry 3 --create-dirs -o "$2" "$1" ; }
# -*-* downloading with netcat currently work in progress -*-*-*
# domain=${1#*://}
# domain=${domain%%/*}
# file=${1#*://}
# file=${file#$domain}

# nc -v -C -w 9999 "$domain" "${2:-80}" <<EOF | sed '/.*\r$/d'
# GET $file HTTP/1.1
# Host: $domain
# Connection: close

# EOF
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
