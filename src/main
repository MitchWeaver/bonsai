# vi:syntax=sh
# shellcheck shell=sh

# unset any env variables that could interfere
unset cc c99 c89 CC \
CFLAGS LDFLAGS CPPFLAGS CXXFLAGS PKG_CONFIG \
LIBRARY_PATH CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH \
OBJC_INCLUDE_PATH LD_LIBRARY_PATH LIBDIR EXTRALIBDIR \
LIBS INCLUDE

initglobals() {
    if [ "$USE_HOST_PATH" = true ] ; then
        # If bootstrapping, relinking the world
        # use the host's userland. When bootstraping, programs
        # will take preference in the $PATH as they install.
        export PATH=".:$root/bin:$PATH"
    else
        # otherwise if not bootstrapping, ONLY use the chroot's tools
        export PATH=".:$root/bin"
    fi

    # can offer significant speedup
    export LC_ALL=C LANG=C
}

main() {
    # if no arguments, just print a pretty tree
    [ "$1" ] || { print_logo ; exit ; }

    # misc options before real commands
    case "$1" in
        --debug) shift ; set -ex ;;
    esac

    # special arguments
    case "$1" in
        --bootstrap)
            export BOOTSTRAP=true USE_HOST_PATH=true
            loadconfig
            initglobals
            addpkg @core || exit 1
            # download libressl and curl so they can be 
            # installed later within chroot
            msg 'downloading additional sources...'
            for pkg in libressl curl ; do
                DLONLY=true NO_PROMPT=true addpkg --quiet $pkg || exit 1
            done
            msg 'System has been bootstrapped! You may now chroot in...'
            exit
            ;;
        *relink*world)
            loadconfig
            export USE_HOST_PATH=true
            initglobals
            ;;
        unpack)
            loadconfig
            if isinst sbase >/dev/null ; then
                initglobals
            else
                export USE_HOST_PATH=true
                initglobals
            fi
            ;;
        --hosts-path) # force usage of host's path
            loadconfig
            export USE_HOST_PATH=true
            initglobals
            shift
            ;;
        *skeleton|skel)
            loadconfig --skeleton
            create_skeleton_config
            exit $?
            ;;
        *) loadconfig
           initglobals
    esac

    # check if our package symlinks are valid -- if not, error out
    case " $1 $2 " in
        # if relinking the world we know our symlinks will be currently incorrect
        *relink*world*) ;;
        *) check_links 
    esac
    
    while [ "$1" ] ; do
        case "$1" in
            # ---- variable setting -------
            *dlonly) export DLONLY=true ; shift ;;
            -y) export NO_PROMPT=true ; shift ;;
            # -----------------------------
            *relink*world) relink_world "$2" ; exit $? ;;
            list|-l)   listpkgs      ; exit $? ;;
            search|-s) search "$2"   ; exit $? ;;
            info|-i)   portinfo "$2" ; exit $? ;;
            print|-p)  portcat "$2"  ; exit $? ;;
            count)     countpkgs     ; exit $? ;;
            pack)      pack "$2"     ; exit $? ;;
            unpack)    unpack "$2"   ; exit $? ;;
            rdeps)     rdeps  "$2"   ; exit $? ;;
            add|-a) shift ; addpkg "$@" ; exit $? ;;
            del|-d) shift ; delpkg "$@" ; exit $? ;;
            *help|-h) usage ; exit ;;
            relink|-r)
                shift
                while [ "$1" ] ; do
                    linkpkg "$1"
                    shift
                done
                ;;
            isinst)
                shift
                while [ "$1" ] ; do
                    isinst "$1"
                    shift
                done
                ;;
            deps)
                pkgdeps "$2"
                if [ "$pkgdeps" ] ; then
                    msg "$pkgdeps"
                    exit $?
                else
                    msg "port $2 has no dependencies"
                    exit 1
                fi
                ;;
            *)
                
                if [ "$1" ] ; then
                    # If none matched and there is an argument,
                    # we must be adding a package
                    # and omitting the 'add' (convenience).
                    # recurse again, adding the 'add' argument
                    set -- add "$@"
                else
                    # otherwise must have no arguments
                    # just print a pretty tree
                    bonsai
                fi
        esac
    done
}
