# vi:syntax=sh
# shellcheck shell=sh

loadconfig() {
    if [ "$config" ] ; then
        bonsairc="$config"
    elif [ -f /src/bonsai.rc ] ; then
        bonsairc=/src/bonsai.rc
    else 
        bonsairc="${HOME}"/.local/bonsai/src/bonsai.rc
        [ -s "$bonsairc" ] || create_skeleton_config
    fi
    [ -r "$bonsairc" ] || die 'loadconfig(): could not source config'
    . "$bonsairc"

    [ "$_root" ] && root="$_root"
   
    # make necessary directories
    mkdir -p "${root:="${HOME}/.local/bonsai"}" \
             "${bonsaihome:="$root/src"}" \
             "${pkgs:="$bonsaihome/pkgs"}" \
             "${ports:="$bonsaihome/ports"}" \
             "${sources:="$bonsaihome/sources"}" \
             "${work:="$bonsaihome/work"}"

    # set default variables if not in config file
    : "${bonsaidb:="$bonsaihome/bonsai.db"}" \
      "${confirm_prompt:="continue? (y/n): "}" \
      "${prompt='→'}" \
      "${delim:='#'}"

    [ "$_gcc" ] && gcc="$_gcc"

    update_db
    sanity_check
    unset _root _gcc _config
}

# creates a skeleton config
# params: $path
create_skeleton_config() {
    if [ "$1" ] ; then
        if [ ! -e "$1" ] ; then
            path="$1"
        else
            die "create_skeleton_config(): Refusing to overwrite $1"
        fi
    else
        path="${HOME}"/.local/bonsai/src
        mkdir -p "$path"
        echo 'copying default config to ~/.local/bonsai/bonsai.rc'
    fi
cat > "$path"/bonsai.rc << "EOF"
# bonsai root
root=${HOME}/.local/bonsai

# compiling
gcc="$root/bin/gcc"
jobs=$(grep -c 'cpu cores' /proc/cpuinfo 2>/dev/null)
: ${jobs:=1}

# options
makeflags=''
keep_tarballs=true
mans=true   # install man pages?
docs=false  # install extra documentation?
nls=false   # provide native-language-support?
debug=false # compile in debugging tools/information?
tests=false # compile included tests?

# prompt prefixing msgs from the pkg mgr
prompt='→'  # msg prompt

# used to confirm adding/deleting pkgs
confirm_prompt='continue? (y/n): '

# configure/make silently without warnings?
# note: this enables as much silencing as allowed,
#       but does NOT send everything to /dev/null
quiet=false

# PS1 inside chroot
# common favorites: 🌿 🍂 🌱 → % $
PS1='🌿 '

# package/version delimiter
# can be any character or series of characters, however:
# * must be sane (no $, `, /, etc)
# * cannot be '-' due to the character often being in pkg names
# * common favorites: #@?!*†¤§≡
delim='#'

# flags
# warning: do not change these unless you seriously know what you're doing.
cflags="-static --static -s -w -Os -no-pie -pipe -march=native -ffast-math"
cflags="$cflags -Wl,--gc-sections -fstack-protector-strong"
ldflags="-static --static -s -fdata-sections -ffunction-sections"
cppflags='-static --static'
cxxflags="$cflags"
EOF
}
