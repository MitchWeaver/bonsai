# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Portfile Handling      http://github.com/bonsai-linux/bonsai
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

getportdir() {
while read -r dir ; do
    if [ -d "$dir$1" ] ; then
        portdir=$dir$1
        return
    fi
done <<-EOF
$(printf '%s\n' "$PORTS"/*/)
EOF
die "unable to find portdir for '$1'"
}

getpkgfile() {
    [ "$portdir" ] || getportdir "$1"
    [ -f "$portdir"/pkgfile ] || die "unable to find pkgfile for '$1'"
    pkgfile=$portdir/pkgfile
}

# desc: loads $pkgfile variables into environment
# arg: $name or $pkgstring of package
loadpkgfile() {
    name=${1%%\#*}
    getportdir "$name"
    getpkgfile "$name"
    . "$pkgfile"

    # helper variables
    pkgstring=$name${ver:+\#}$ver

    # dir where port will be built and files copied
    workdir=${WORK:-?}/$name
    # dir the package will be installed to
    pkg=$PKGS/$pkgstring
}

unloadpkgfile() {
    unset bin name portdir pkgfile pkgstring pkg workdir
    unset info url ver deps link
    unset -f build prebuild postbuild
}

# checks whether $name is installed
isinst() {
    # prefixed '@' denotes metapkgs, which do not have versions
    case $1 in
        @*)
            [ -d "$PKGS/$1" ]
            ;;
         *)
            # we use a case statement as globs do not work with test
            printf '%s\n' "$PKGS"/*/ | \
            while read -r dir ; do
                case $dir in */"$1"\#*) break ; esac
                false
            done
    esac
    return $?
}

# list packages installed
listpkgs() {
    printf '%s\n' "$PKGS"/* | \
    while read -r pkg ; do
        printf '%s\n' "${pkg#$PKGS/}"
    done
}

# search for a packaged named $1
searchpkg() {
    printf '%s\n' "$PORTS"/*/* | \
    while read -r dir ; do
        case $dir in
            *"$1"*)
                printf '%s\n' "${dir##*/}"
        esac
    done | sort
}

# calculates dependencies of a $name and stores
# them in $pkgdeps in the correct installation order
#
# wordsplitting is used intentionally, ignore:
# shellcheck disable=2086,2068
pkgdeps() {
    master=$1

    # recursively go through the dependency tree appending
    # unique deps to $pkdeps as we go
    dep_recurse() {

        # clear deps from previous file
        unset deps

        # load in deps of package
        loadpkgfile "$1"

        # save the name of the package being checked
        # we must use the arg array for this otherwise
        # it will get overwritten on next recurse
        set -- $name

        # recurse for each dep that exists
        for dep in $deps ; do
            contains "$pkgdeps" " $dep " || dep_recurse $dep
        done

        # When we reach the bottom-most child of a dependency
        # tree, we add it to the list. Then the recursions
        # complete appending each of their parents to the list.
        if [ "$master" != "$1" ] ; then
            pkgdeps="$pkgdeps $1"
        fi
    }

    # start recursion
    dep_recurse "$1"

    # trim whitespace and clear duplicates
    # note: '${var:+string}' returns 'string' if 'var' is defined
    set -- $pkgdeps
    pkgdeps=
    for dep in $@ ; do
        contains "$pkgdeps" "$dep" ||
        pkgdeps="$pkgdeps${pkgdeps:+ }$dep"
    done
}

# # show what packages depend on given port
# # params: $name
# rdeps() {
#     # echo all packages that list $1 in their $deps
#     depends() {
#         find "$PORTS" -name pkgfile | while read -r _pkgfile ; do
#             deps=""
#             . "$_pkgfile"
#             for dep in $deps ; do
#                 [ "$dep" = "$1" ] && echo "$_pkgfile"
#             done
#         done
#     }
#     deps="$(depends "$1")"

#     for dep in $deps ; do
#         deps="$deps $(depends "$dep")"
#     done
   
#     # 1. remove duplicates and white space
#     # 2. convert $BONSAI_ROOT/src/ports/$name/pkgfile -> $name
#     set -- $(\
#         for dep in $deps ; do
#             printf '%s\n' $(basename $(dirname $dep)) $@
#         done | sort -u \
#     )
#     msg "$*"
#     unset deps dep
# }
