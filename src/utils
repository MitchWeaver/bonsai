# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# utils                  http://github.com/bonsai-linux/bonsai
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# vi:syntax=sh
# shellcheck shell=sh
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

msg() { echo "\033[32;1m${PROMPT}\033[m $*" ; }
msg_no_nl() { echo -n "\033[32;1m${PROMPT}\033[m $*" ; }
warn() { >&2 echo "\033[33;1m${PROMPT} \033[mwarning: $*" ; }
die() { >&2 echo "\033[31;1m${PROMPT} \033[merror: $*" ; exit 1 ; }

usage() {
cat <<EOF
bonsai pkg mgr
 
commands:
-----------
add    | -a
del    | -d
relink | -r
update | -u
search | -s
info   | -i
list   | -l
print  | -p
count  | -c
deps rdeps
pack unpack
isinst
EOF
}

# converts "bash#4.8" -> "bash"
pkgid2pkg() { echo "${1%%$DELIM*}" ; }

# converts "bash" -> "bash#4.8"
pkg2pkgid() { echo "$(grep -x -E -- "$1$DELIM.*" "$PKGDB")" ; }

# params: full_string, partial_string
contains() { [ "${1#*$2}" != "$1" ] || return 1 ; }

# checks if a function is defined
defined() {
    case "$(type "$1")" in
        *" function"*) ;;
        *) return 1
    esac
}

# prompts user for confirmation - returns 1 on 'n' or bad input
# params: message to be printed
confirm() {
    if [ -z "$NO_PROMPT" ] ; then
        msg_no_nl "$CONFIRM_PROMPT"
        read -r ans
        case "$ans" in
            y|"") ;; # "" is equivalent to user pressing enter
            *) return 1
        esac
    fi
}

# retrieves port folder for $name
getportdir() {
    find "$PORTS" -type f -path "*/$1/pkgfile" | while read -r pkgfile ; do
        echo "${pkgfile%/*}"
    done
}
# retrieves pkgfile for $name
getpkgfile() {
    echo "$(getportdir "$1")"/pkgfile
}

# cleans tree and work of empty packages, removes junk
# params: [$name]
clean() {
    if [ "$1" ] ; then
        rm -rf "$WORK/$1" 2>/dev/null
        [ -d "$PKGS/$1" ] && 
        for dir in share/info share/doc sucks ; do
            rm -rf "$PKGS"/$1/$dir 2>/dev/null
        done
    fi
    rm -rf "$ROOT"/sucks 2>/dev/null
    find "$WORK" -type d ! -name "$WORK" -exec rmdir "{}" 2>/dev/null ||: \;
    find "$PKGS" -type d ! -name "$PKGS" -exec rmdir "{}" 2>/dev/null ||: \;
}
