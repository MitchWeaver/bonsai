# search ports for given $name
search() {
    set -- $(find "$ports" ! -path "$ports" -type d -name "*$1*")
    [ "$1" ] || die "port $1 not found"
    for path in $@ ; do
        path="${path##*/}"
        echo "${path%.*}"
    done
    unset results path
}

# gets dependencies of a given port 
# and stores them in $pkgdeps 
# in the order needed to be installed
# param: $name
pkgdeps() {
    arg=$1
    dep_recurse() {
        unset deps
        if [ -f "$ports/$1/pkgfile" ] ; then
            . "$ports/$1/pkgfile"
        else
            die "pkgdeps(): could not source $1's pkgfile"
        fi

        if [ "$deps" ] ; then
            for dep in $deps ; do
                case "$to_check" in
                    *" $dep "*) ;; # dependency is already in list
                    *) to_check=" $deps $pkgdep "
                esac
            done

            for dep in $deps ; do
                dep_recurse "$dep"
            done
        fi
        [ $1 != $arg ] && pkgdeps="$pkgdeps $1"
    }
    dep_recurse "$arg"

    export pkgdeps

    unset -f dep_recurse
    unset dep deps arg
}


# print info about a given $name
portinfo() {
    [ $# -gt 1 ] && die "info(): too many arguments"
    [ $# -eq 0 ] && die "info(): no argument provided"
    name=$1
    pkgfile="$ports"/$name/pkgfile

    [ -f "$pkgfile" ] || die "addpkg(): could not source $name's pkgfile"
    . "$pkgfile"

    [ "$depends" ] || depends=none
    [ "$version" ] || version=unknown
    [ "$info" ]    || info='?'

cat << EOF
name:    $name
info:    $info
version: $version
source:  $source
depends: $depends
EOF
    unset name pkgfile name info version source depends 
}

# print out the contents of a given $name's pkgfile
portcat() {
    [ $# -gt 1 ] && die "pkgcat(): too many arguments"
    [ $# -eq 0 ] && die "pkgcat(): no argument provided"
    pkgfile="$ports"/$1/pkgfile
    [ -f "$pkgfile" ] || die "pkgcat(): could not find $1's pkgfile"
    cat "$pkgfile"
}

# vi:syntax=sh
# shellcheck shell=sh
