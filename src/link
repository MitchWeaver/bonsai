# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# link                   http://github.com/bonsai-linux/bonsai
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# vi:syntax=sh
# shellcheck shell=sh
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

# create symlinks for a port
# params: $name [$pkgs]
# * If $pkgs is not provided, use the config's $PKGS
#
# * If it is provided, symlink targets using this value.
#   This is useful for bootstrapping, as after chrooting in
#   if you had not done this all of your symlinks would be broken.
linkpkg() {
    [ "$nolink" = true ] && return

    name="$1" 
    case $# in
        1) pkgs="$PKGS" ;;
        2) pkgs="$2" ;;
        *) die "linkpkg(): invalid number of arguments"
    esac

    if [ ! -d "$PKGS/$name" ] ; then
        ismetapkg "$name" && return
        die "linkpkg(): $name doesn't appear to be in \$PKGS"
    fi

    cd "$ROOT" || die "linkpkg(): unable to cd to $ROOT"
    msg "creating symlinks for $name..."

    for dir in bin sbin share include etc lib libexec ; do
        if [ -d "$PKGS/$name/$dir" ] ; then
            # recursively create pkg subdirectories in
            # equivalent $ROOT subdirectories
            # example: $name/lib/pkgconfig -> $ROOT/lib/pkgconfig
            find "$PKGS/$name/$dir" ! -path "*$dir" \
                    -type d 2>/dev/null | while read -r subdir ; do
                mkdir -p -- "${subdir#$PKGS/$name/}"
            done

            # recursively link all files
            # example: $name/include/asm/*.h -> $ROOT/include/asm/*.h
            find "$PKGS/$name/$dir" ! -path "*share/*man*" \
                    -type f -o -type l 2>/dev/null | while read -r file ; do
                file="${file#$PKGS/$name/}"
                ln -sf "$pkgs/$name/$file" "$file" 2>/dev/null
            done
        fi &
    done

    for manX in man1 man2 man3 man4 man5 man6 man7 man8 ; do
        if [ -d "$PKGS/$name/share/man/$manX" ] ; then
            find "$PKGS/$name/share/man/$manX" \
                    ! -path "*/$manX" 2>/dev/null | while read -r man ; do
                ln -sf "$pkgs/$name/share/man/$manX/${man##*/}" \
                    "${man#$PKGS/$name/}" 2>/dev/null
            done
        fi &
    done
    wait
}

# * relinks every package installed, used to fix broken / inconsistent symlinks
# * also used to bootstrap systems under a different $ROOT
# params: [--chroot]
relink_world() {
    # if no args, use the $PKGS variable from the bonsai.rc
    case "$1" in
        --chroot) relink_pkgs=/src/pkgs ;;
               *) relink_pkgs="$PKGS"
    esac
    msg "relinking world with \$PKGS=$relink_pkgs..."
    echo

    listpkgs | while read -r pkgid ; do
        pkg="$(pkgid2pkg "$pkgid")"
        if ! grep '^nolink=true$' "$(getpkgfile $pkg)" >/dev/null ; then
            # if its a metapkg, only link if it has a pkgdir
            ismetapkg "$pkg" && [ ! -d "$PKGS/$pkg" ] && continue
            linkpkg "$pkg" "$relink_pkgs"
        fi
    done || die "relink_world(): linking failed"

    echo
    msg 'done!'
}

# checks if links are still sane, (pointing to $pkgs on the correct root)
# * if chrooted, they should point to the /src/pkgs/$name/bin/$name
# * if NOT chrooted, they should point to the $root/src/pkgs/$name/bin/$name
# check_links() {
#     [ "$USE_HOST_PATH" ] && return

#     # Test symlinks for a few coreutils to ensure links are valid.
#     # This will fail should they not exist, but if you don't 
#     # have coreutils, then your system is borked anyway.
#     for prog in cp grep printf ; do
#         [ -e "$root"/bin/$prog ] || die 'no coreutils yet installed?'
#         test_link "$root"/bin/$prog || err_bad_links
#     done
# }

# err_bad_links() {
#         die "World appears to still be linked as a chroot.
#          Use --relink-world without arguments to relink externally."
# }
