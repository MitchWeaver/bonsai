# vi:syntax=sh
# shellcheck shell=sh

# runs build() method inside a pkgfile! -name readme 
# params: none
# asssumes: $pkgworkdir $name and all pkgfile vars in the environment
run_build() { 
    cd "$pkgworkdir" || die "build(): unable to cd to $pkgworkdir"
    msg "building $name..."

    # export all our flags to the environment
    getflags

    # workarounds for packaging that sucks
    sucks

    if defined prebuild ; then
        prebuild || die "$name prebuild() failed"
    elif ! ismetapkg $name ; then
        bonsai_patch || die "$name generic prebuild() failed"
    fi

    cd "$pkgworkdir"
    if defined build ; then
        build || die "$name build() failed"
    elif ! ismetapkg $name ; then
        case "$name" in
            *-bin) ;; # do not try to compile if binary package
            *) generic_build || die "$name generic_build() failed"
        esac
    fi

    cd "$pkgworkdir"
    if defined postbuild ; then
        postbuild || die "$name postbuild() failed"
    fi

    # strip bins/libs, making sure its not disabled 
    # in either the pkgfile or the user's config
    if [ "$nostrip" != true ] && [ "$strip_bins" = true ] ; then
        msg 'stripping binaries...'
        find "$pkg"/bin -type f 2>/dev/null | while read -r file ; do
            strip --strip-all "$file" 2>/dev/null ||:
        done &
        find "$pkg"/lib -type f 2>/dev/null | while read -r file ; do
            strip --strip-unneeded "$file" 2>/dev/null ||:
        done &
        wait
    fi

    # unset in case we are adding multiple packages
    unset -f prebuild build postbuild
}

# * export all compilation related flags to environment
#
# * if given '--no-static' as an argument, will omit
#   all static-compilation related CFLAGS and LDFLAGS
#
# params: [--no-static]
getflags() {
    # 1. users config flags
    CFLAGS="$cflags"
    LDFLAGS="$ldflags"

    # 2. performance / general flags
    CFLAGS="$CFLAGS -Wl,--gc-sections -pipe"
    LDFLAGS="$LDFLAGS -fdata-sections -ffunction-sections"

    # 3. security flags
    CFLAGS="$CFLAGS -D_FORTIFY_SOURCE=2 -D_GLIBCXX_ASSERTIONS \
-fexceptions -fstack-protector-strong -fstack-clash-protection \
-fasynchronous-unwind-tables -fcf-protection \
-Wl,-z,defs -Wl,-z,now -Wl,-z,relro -Wl,-z,noexecstack \
-Wl,-z,nodump"

    # 4. static related flags
    case "$1" in
        --no-static) ;; # do not add static flags
        *)
            CFLAGS="$CFLAGS -static --static -static-libgcc -static-libstdc++ \
-Wl,-Bstatic -fpic -Wl,-z,nodlopen"
            LDFLAGS="$LDFLAGS -static --static"
            AM_LDFLAGS="$AM_LDFLAGS -static --static"
    esac

    LIBRARY_PATH=".:$root/lib:$root/libexec"
    CPATH=".:$root/include"
    CPPFLAGS="$CPPFLAGS $cppflags"
    CXXFLAGS="$CXXFLAGS $cxxflags"
    DESTDIR="$pkgs/$name"
    PREFIX=/
    prefix=/
    DOCDIR="$pkg"/sucks
    cc="${cc:=$gcc}"
    CC="${cc:=$cc}"
    HOSTCC="$CC"
    MAKEINFO=false
    SHELL=/bin/sh
    PKG_CONFIG_PATH="$root/lib/pkgconfig:$root/share/pkgconfig"
    PKG_CONFIG='pkgconf --static'

    # only export libtool if we're not bootstrapping 
    # (stage0 will not have this installed)
    if type slibtool >/dev/null 2>&1 ; then
        export LIBTOOL=/bin/slibtool-static
    else
        export LIBTOOL="$(which libtool)"
    fi

    # commonly used variables for programs
    : "${GREP:=grep}" "${FGREP:=grep -f}" "${EGREP:=grep -e}" \
      "${SED:=sed}" "${AWK:=awk}" "${TAR:=tar}" "${FIND:=find}" \
      "${YACC:=yacc}"

    export TARGET HOST BUILD CC cc HOSTCC SHELL LIBRARY_PATH CPATH \
           PKG_CONFIG_PATH CFLAGS LDFLAGS CPPFLAGS CXXFLAGS PREFIX prefix \
           DOCDIR MAKEINFO GREP FGREP EGREP SED AWK TAR FIND YACC
}

# convenience function, tries to find all *.patch
# in the top-level $workdir/$name directory and apply them
bonsai_patch() {
    find . ! -name . -prune -name "*.patch" | while read -r patch ; do
        { patch -p0 < "$patch" || return 1 ; } | msg
    done
}

bonsai_autogen() { ./autogen.sh "$@" || die "autogen.sh failed for $name" ; }

# if --path= param is provided, use ./"$path"/configure
# instead of assumed "./configure" (ie ./"$PWD"/configure)
# possible params: --path=""
bonsai_configure() {
    # set path to the configure script, if provided
    case "$1" in
        --path=*) configure_path="${1#--path=}" ; shift ;;
        *) configure_path="$PWD"
    esac

    # try to enable as many options as possible
    # if they are allowed in the configure script
    tmp_help="$workdir/$name.cfhelp"
    tmp_flags="$workdir/$name.cfflags"

    "$configure_path"/configure --help > "$tmp_help"
    :> "$tmp_flags"

    # params: flag_to_check flag_to_add
    addflag() {
        grep -F -- "$1" "$tmp_help" >/dev/null && 
            echo "$2" >> "$tmp_flags"
    }

    # -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    # Global configure flags. These are applied to all packages.
    #
    # set in bonsai.rc:
    ${nls:=false}   || _nls=--disable-nls
    ${quiet:=false} && _quiet='--silent --quiet'   
    #
    # flags that are the same as what we check for
    for flag in --static --enable-static --enable-static-link --all-static \
                --disable-shared --without-shared --disable-rpath \
                --with-pic --enable-pic \
                --disable-option-checking --disable-dependency-tracking \
                --enable-fast-install --disable-largefile --disable-libtool-lock \
                --disable-docs --disable-gtk-docs --disable-gtk-docs-html \
                --disable-documentation --disable-devel-docs --disable-build-docs \
                --without-asciidoc --without-tests --disable-tests \
                --without-debug --disable-debug --disable-debugger \
                --without-ada $_quiet $_nls ; do
        addflag $flag $flag
    done
    #
    # flags that are dynamic
    addflag --enable-shared --disable-shared
    addflag --with-shared --without-shared
    addflag --disable-static --enable-static
    addflag --with-gnu-ld --without-gnu-ld
    addflag --with-debug --without-debug
    addflag --enable-tests --disable-tests
    addflag --with-tests --without-tests
    addflag --with-doc= --with-doc=no
    addflag --with-doxygen --without-doxygen
    addflag --enable-documentation --disable-documentation
    addflag --with-xmlto --without-xmlto
    addflag --with-fop --without-fop
    addflag --with-xsltproc --without-xsltproc
    addflag --prefix= --prefix="$PREFIX"
    addflag --infodir= --infodir="$PREFIX"/sucks
    addflag --docdir= --docdir="$PREFIX"/sucks
    addflag --htmldir= --htmldir="$PREFIX"/sucks
    # -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    # add a new line to denote separation between global flags
    # and argument-supplied flags
    echo >> "$tmp_flags"

    # add all argument-supplied flags to the flag file
    for flag in "$@" ; do echo "$flag" ; done >> "$tmp_flags"

    "$configure_path"/configure $(shellcat "$tmp_flags") || 
        die "configure failed for $name"
}

bonsai_make() {
    # set in bonsai.rc:
    [ "$mans"  = false ] && _mans="MANDIR=$pkg/sucks"
    [ "$quiet" = true  ] && _quiet='-s'

    make $makeflags -j${jobs:=1} $_mans $_quiet \
        CC="$CC" cc="$CC" LIBTOOL="$LIBTOOL" MAKE="make LIBTOOL='$LIBTOOL'" \
        DESTDIR="$DESTDIR" PREFIX="$PREFIX" prefix="$PREFIX" \
        DOCDIR="$DOCDIR" "$@" || die "make $* failed for $name"
}

# run if pkgfile doesn't define a custom build()
generic_build() {
    if [ -f configure ] ; then
        bonsai_configure || return 1
    elif [ -f autogen.sh ] ; then
        bonsai_autogen || return 1
        bonsai_configure || return 1
    fi
    bonsai_make || return 1
    bonsai_make install || return 1
}
