# runs build() method inside a pkgfile! -name readme 
# params: $name
run_build() { 
    msg "building $name..."

    getflags
    GNU_sucks

    # run user defined prebuild(), if exists
    if defined prebuild ; then
        prebuild || die "$1 prebuild() failed"
    else # else, try to apply any patches (convenience)
        patch || die "$1 generic prebuild() failed"
    fi

    # run user defined build(), if exists
    if defined build ; then
        build || die "$1 build() failed"
    else
        generic_build || die "$1 generic_build() failed"
    fi

    # run user defined postbuild(), if exists
    if defined postbuild ; then
        postbuild || die "$1 postbuild() failed"
    fi

    # unset in case we are adding multiple packages
    unset -f prebuild build postbuild
}

# convenience functions
cc()  { $cc  -static -Os -s "$@" ; }
gcc() { $gcc -static -Os -s "$@" ; }

getflags() {
    . "$root"/etc/profile 2>/dev/null ||:
    LIBRARY_PATH=".:$root/lib:$root/libexec"
    CPATH=".:$root/include"
    CFLAGS="$CFLAGS $cflags"
    LDFLAGS="$LDFLAGS $ldflags"
    CPPFLAGS="$CPPFLAGS $cppflags"
    CXXFLAGS="$CXXFLAGS $cxxflags"
    PREFIX="$pkgs/$name"
    prefix="$PREFIX"
    DESTDIR=''
    BINDIR="$PREFIX/bin"
    INCLUDEDIR="$PREFIX/include"
    LIBDIR="$PREFIX/lib"
    LIBEXECDIR="$PREFIX/libexec"
    MANDIR="$PREFIX/share/man"
    PRESERVEDIR="$root/var/preserve"
    cc="${cc:=$gcc}"
    CC="${cc:=$cc}"
    export LIBRARY_PATH CPATH \
           CFLAGS LDFLAGS CPPFLAGS CXXFLAGS CC cc \
           PREFIX prefix DESTDIR BINDIR INCLUDEDIR \
           LIBDIR LIBEXECDIR MANDIR PRESERVEDIR
}

# convenience function, tries to find all *.patch
# in $work/$name directory and apply them
patch() {
    find . ! -name . -prune -name "*.patch" | while read -r patch ; do
        command patch -p0 < "$patch" | msg
    done
    unset patch
}

autogen() { configure --autogen ; }

configure() {
    if [ "$1" = "--autogen" ] ; then
        FILE=autogen.sh
        shift
    else
        FILE=configure
        set -- -C --prefix="$PREFIX" "$@"
    fi

    ${docs:=false}  || _docs="--disable-docs --disable-gtk-docs --disable-gtk-docs-html --docdir=/dev/null"
    ${nls:=false}   || _nls=--disable-nls
    ${tests:=false} || _tests=--without-tests
    ${debug:=false} || _debug='--disable-debug --disable-debugger'
    ${quiet:=false} && _quiet='--silent --quiet'

    if [ $FILE = configure ] ; then
        # try to enable as many options as possible
        # if they are allowed in the configure script
        _tmp_help="$root"/src/work/$name.confhelp
        _tmp_flags="$root"/src/work/$name.confflags
        ./$FILE --help > $_tmp_help
        :> $_tmp_flags

        # params: flag_to_check flag_to_add
        addflag() {
            grep -- "$1" $_tmp_help > /dev/null && 
                printf "%s\n" "$2" >> $_tmp_flags
        }

        for flag in --static --enable-static --enable-static-link --disable-shared \
                    --disable-rpath --disable-option-checking  --enable-fast-install \
                    --disable-dependency-tracking --without-ada --without-shared \
                    --disable-libtool-lock \
                    $_quiet $_debug $_nls $_docs $_tests ; do
            addflag $flag $flag &
        done

        addflag --with-gnu-ld --without-gnu-ld &
        addflag --enable-shared --disable-shared &
        addflag --enable-tests  --disable-tests &
        addflag --with-shared   --without-shared &
        $debug || addflag --with-debug    --without-debug &
        $tests || addflag --with-tests --without-tests &
        $tests && addflag --enable-extratests --enable-extratests &
        wait
    fi

    ./$FILE $(cat $_tmp_flags) "$@"

    set $?
    unset -f addflag
    unset flag _tmp_help _docs _nls _debug _quiet _tests FILE tmp
    return $1
}

make() {
    $mans   || _mans='MANDIR=/dev/null'
    $quiet  && _quiet='-s'

    command make $makeflags -j${jobs:=1} $_mans $_quiet \
        CC="$CC" \
        cc="$CC" \
        DESTDIR="$DESTDIR" \
        PREFIX="$PREFIX" \
        prefix="$PREFIX" \
        BINDIR="$BINDIR" \
        INCLUDEDIR="$INCLUDEDIR" \
        LIBDIR="$LIBDIR" \
        LIBEXECDIR="$LIBEXECDIR" \
        MANDIR="$MANDIR" \
        PRESERVEDIR="$PRESERVEDIR" "$@"

    set $?
    unset _quiet _docs
    return $1
}

# run if pkgfile doesn't define a custom build()
generic_build() {
    if [ -s configure ] ; then
        configure
    elif [ -s autogen.sh ] ; then
        autogen
        configure
    fi
    make
    make install
}

# remove junk files from $pkgs/$1
clear_junk() {
    rm -r "$pkgs/$1/share/info" 2>/dev/null ||:
    $docs || rm -r "$pkgs/$1/share/doc" 2>/dev/null ||:
    $mans || rm -r "$pkgs/$1/share/man" 2>/dev/null ||:
}
# vi:syntax=sh
# shellcheck shell=sh
