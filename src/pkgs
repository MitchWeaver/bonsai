# vi:syntax=sh
# shellcheck shell=sh

# tar up a package for release / distribution, placing result in $PWD
# Notes: We force delim to be '-' here, this is to ensure web
#        compatbility. (Ex: cannot have '#' natively in URLs)
# params: $name
pack() {
    requires 'pack()' tar xz
    isinst "$1" >/dev/null || die "$1 is not installed"
    [ -d "$pkgs/$1" ] || die "$1 was not found in \$pkgs"
    file="$(pkg2pkgid "$1" | sed "s/$delim/-/")".tar.xz
    { tar -C "$pkgs" -cf - "$1" | xz -T 0 -z - > "$file" ; } || \
        die "failed to compress $1"
    msg "successfully packed $1 as ./$file"
}

# untar a downloaded binary package and install it.
# params: $pack
unpack() {
    # lint tarball - must conform to name-version.tar.xz
    echo "$*" | grep -E -- '.*.-.*.tar.xz' >/dev/null || die "incorrect pack format"
    # must also not contain any spaces
    echo "$*" | grep -F -- ' ' >/dev/null && die "incorrect pack format"

    pkgid="${1%.tar.xz}"
    name="${pkgid%-*}"
    version="${pkgid#$name-}"

    # clear any work from possible existing build
    # TODO: should this be $work?
    rm -rf "${work:?}" 2>/dev/null ||:

    # check if is already installed
    isinst "$name" >/dev/null && die "port $name is already installed"

    # unpack
    { decompress "$1" | tar -C "$pkgs" -xf - ; } || die "failed to decompress $1"

    # this is to be fixed later, for now:
    case "$name" in kernel|syslinux) nolink=true ; esac

    # link and install
    installpkg "$name" || die "$name failed to install"
    unload_pkgfile
}

# converts "bash#4.8" -> "bash"
pkgid2pkg() { printf '%s' "${1%%$delim*}" ; }

# converts "bash" -> "bash#4.8"
pkg2pkgid() {
    isinst "$1" >/dev/null || \
        die "$1 is not installed -- cannot determine version"
    printf '%s' "$(grep -x -E "$1$delim.*" "$root"/src/bonsai.db)"
}

# returns if given $name is a metapkg
ismetapkg() {
    grep -x 'metapkg=true' "$ports/$1/pkgfile" >/dev/null
    return $?
}

# cleans $pkgs tree of empty dirs and clears $workdir
# params: none
clean() {
    rm -rf "${workdir:-?}" 2>/dev/null ||:
    # attempt to remove $work if it is empty
    rmdir "$work" 2>/dev/null ||:
    find "$pkgs" -type d ! -path "$pkgs" -prune | while read -r dir ; do
        rmdir "$dir" 2> /dev/null ||:
    done
    update_db
}
