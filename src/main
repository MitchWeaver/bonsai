PKG_MGR_NAME=$(basename "$0")
export PKG_MGR_NAME

initglobals() {
    # unset any env variables that could interfere
    unset cc CC CFLAGS LDFLAGS CPPFLAGS CXXFLAGS \
        LIBRARY_PATH CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH \
        OBJC_INCLUDE_PATH PKG_CONFIG INCLUDE LD_LIBRARY_PATH
    
    PKG_CONFIG_PATH="$root/lib/pkgconfig:/lib/pkgconfig"
    PATH="$root/bin:$PATH"
    LC_ALL=C
    LANG=C
    export PATH PKG_CONFIG_PATH LC_ALL LANG
}

main() {
    [ "$1" ] || usage

    case "$1" in
        *skeleton|skel) create_skeleton_config "$2" ; exit $? ;;
        --config=*) config="${1#--config=}" ; shift ;;
        --root=*) _root="${1#--root=}" ; shift ;;
        --gcc=*) _gcc="${1#--gcc=}" ; shift ;;
        --debug) set -x ; shift ;;
        -y) NO_PROMPT=true ; export NO_PROMPT ; shift ;;
        *help|-h)  usage ;;
    esac

    loadconfig
    initglobals
    create_root_dirs
    setup_etc

    while [ $# -gt 0 ] ; do
        case "$1" in
            add|-a) shift ; addpkg "$@" ; exit $?  ;;
            del|-d)
                shift
                [ "$1" ] || die "delpkg(): no pkg given"
                while [ "$1" ] ; do
                    delpkg "$1"
                    shift
                done
                ;;
            isinst|-i)
                shift
                [ "$1" ] || die 'isinst(): no argument given'
                while [ "$1" ] ; do
                    isinst "$1"
                    shift
                done
                ;;
            list|-l)   listpkgs      ; exit $? ;;
            search|-s) search "$2"   ; exit $? ;;
            count|-c)  countpkgs     ; exit $? ;;
            info)      portinfo "$2" ; exit $? ;;
            cat)       portcat "$2"  ; exit $? ;;
            deps)
                pkgdeps "$2"
                if [ "$pkgdeps" ] ; then
                    msg "$pkgdeps"
                    exit
                else
                    msg "port $2 has no dependencies"
                    exit 1
                fi
                ;;
            relink|link)
                shift
                [ "$1" ] || die "linkpkg(): invalid number of arguments"
                while [ "$1" ] ; do
                    linkpkg "$1"
                    shift
                done
                ;;
            --relink-world)
                shift
                relink_world "$@"
                exit $?
                ;;
            gccinfo) gccinfo ; exit $? ;;
            chroot) enter_chroot ; exit $? ;;
            *) set -- add "$@" ;;
        esac
    done
    exit $?
}
# vi:syntax=sh
# shellcheck shell=sh
