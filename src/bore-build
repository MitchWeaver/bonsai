# runs build() method inside a pkgfile
# params: pkgname
run_build() {
    # if we're using pkg mgr's built in gcc, make sure its valid/existant
    # if its not -- check to see if we're trying to download one
    # ... if not, we cannot compile packages -- error out
    if [ ! -x "$gcc" ] ; then
        case $pkgname in
            *gcc*|*tcc*) ;;
            *) die "No compiler toolchain has yet been installed.
         Try \`$PKG_MGR_NAME search gcc\` to find one."
        esac
    fi

    getflags
    GNU_sucks

    if defined prebuild ; then
        name=$1 prebuild || die "$1 prebuild() failed"
    else # else, try to apply any patches (convenience)
        patch || die "$1 generic prebuild() failed"
    fi

    msg "building $pkgname..."

    # run user defined build(), if exists
    if defined build ; then
        name=$1 build || die "$1 build() failed"
    else
        name=$1 generic_build || die "$1 generic_build() failed"
    fi

    # run user defined postbuild(), if exists
    if defined postbuild ; then
        name=$1 postbuild || die "$1 postbuild() failed"
    fi

    # unset in case we are adding multiple packages
    unset -f prebuild build postbuild
}

# convenience functions
cc() { $cc "$@" ; }
gcc() { $_gcc "$@" ; }
# tcc() { $_tcc "$@" ; }

getflags() {
    CFLAGS="-I. -L. -I$root/include -L$root/lib -B$root/libexec $CFLAGS $cflags"
    LDFLAGS="$LDFLAGS $ldflags"
    CPPFLAGS="$CPPFLAGS $cppflags"
    CXXFLAGS="$CXXFLAGS $cxxflags"
    PKG_CONFIG="$pkgcfgflags"
    PREFIX="$pkgs/$pkgname"
    DESTDIR=""
    BINDIR="$PREFIX/bin"
    INCLUDEDIR="$PREFIX/include"
    LIBDIR="$PREFIX/lib"
    LIBEXECDIR="$PREFIX/libexec"
    MANDIR="$PREFIX/share/man"
    PRESERVEDIR="$root/var/preserve"

    _gcc="$gcc $CFLAGS"

    [ -z "$cc" ] && cc="$_gcc"
    CC="$cc"
}

# convenience function, tries to find all *.patch
# in $work/$pkgname directory and apply them
patch() {
    [ "$1" ] && cd "$1"
    ls | grep ".patch$" | while read -r patch ; do
        command patch -p0 < "$patch" | msg
    done
    [ "$1" ] && cd - > /dev/null
    unset patch
}

autogen() { configure --autogen ; }

configure() {
    if [ "$1" = "--autogen" ] ; then
        FILE=autogen.sh
        shift
    else
        FILE=configure
    fi

    ! $docs  && conf_docs="--disable-docs \
                           --disable-gtk-docs \
                           --disable-gtk-docs-html"
    ! $nls   && conf_nls='--disable-nls'
    ! $debug && conf_debug='--disable-debug --disable-debugger'
    $quiet   && conf_quiet='--silent --quiet'

    if [ -f configure ] ; then
        # try to enable as many options as possible
        # if they are allowed in the configure script
        allowed=""
        tmp_help=/tmp/$PKG_MGR_NAME-$$.tmp
        ./configure --help > $tmp_help

        for flag in --static --enable-static --enable-static-link \
                    --disable-rpath --disable-option-checking --without-tests \
                    --disable-dependency-tracking \
                    $conf_quiet $conf_debug $conf_nls $conf_docs ; do
            grep -- "$flag" $tmp_help > /dev/null && allowed="$allowed $flag"
        done

        grep -- --enable-shared $tmp_help > /dev/null &&
            allowed="$allowed --disable-shared"
        grep -- --enable-tests $tmp_help > /dev/null &&
            allowed="$allowed --disable-tests"


        rm -f $tmp_help
    fi

    CFLAGS="$CFLAGS" \
    LDFLAGS="$LDFLAGS" \
    CPPFLAGS="$CPPFLAGS" \
    CXXFLAGS="$CXXFLAGS" \
    CC="$cc" \
    cc="$cc" \
    DESTDIR="$DESTDIR" \
    PREFIX="$PREFIX" \
    prefix="$PREFIX" \
    BINDIR="$BINDIR" \
    INCLUDEDIR="$INCLUDEDIR" \
    LIBDIR="$LIBDIR" \
    LIBEXECDIR="$LIBEXECDIR" \
    MANDIR="$MANDIR" \
    PRESERVEDIR="$PRESERVEDIR" \
        ./$FILE $allowed "$@" > /dev/null
# --prefix="$PREFIX" 

    return $?
    # unset allowed flag tmp_help conf_docs conf_nls conf_debug conf_quiet
}

make() {
    ! $mans && make_docs="MANPREFIX=/dev/null MANDIR=/dev/null"
    $quiet  && make_quiet='-s'

    CFLAGS="$CFLAGS" \
    LDFLAGS="$LDFLAGS" \
    CPPFLAGS="$CPPFLAGS" \
    CXXFLAGS="$CXXFLAGS" \
        command make $makeflags -j$jobs $make_docs $make_quiet \
        CC="$cc" \
        cc="$cc" \
        DESTDIR="$DESTDIR" \
        PREFIX="$PREFIX" \
        prefix="$PREFIX" \
        BINDIR="$BINDIR" \
        INCLUDEDIR="$INCLUDEDIR" \
        LIBDIR="$LIBDIR" \
        LIBEXECDIR="$LIBEXECDIR" \
        MANDIR="$MANDIR" \
        PRESERVEDIR="$PRESERVEDIR" "$@"
        # > /dev/null

    return $?
    # unset make_quiet make_docs
}

# run if pkgfile doesn't define a custom build()
generic_build() {
    [ -f autogen.sh ] && autogen
    [ -f configure ] && configure
    make
    make install
}

# helper to get around all things that GNU does wrong with packaging
GNU_sucks() {
    # Some GNU makefiles test certain program flags to see if they
    # are GNU coreutils programs. Some of our minimal programs fail this,
    # causing the makefile to abort unless $ENV variables are set. Absurd.
    # Should a makefile not work correctly with our coreutils, 
    # it will be patched on a per-port basis.
    export GREP=$(which grep) SED=$(which sed) AWK=$(which awk)
}

# remove junk files
# params: $pkgname
clear_junk() {
    [ -d "$pkgs"/$1/share/info ] && rm -r "$pkgs"/$1/share/info
    if ! $docs && [ -d "$pkgs"/$1/share/doc ] ; then
        rm -r "$pkgs"/$1/share/doc
    fi
    if ! $mans && [ -d "$pkgs"/$1/share/man ] ; then
        rm -r "$pkgs"/$1/share/man
    fi
}
