# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Build Functions
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

run_build() {
    cd "$WORK/$pkg"
    msg "building $name"

    flags

    # if pkgfile has a run() function, execute it
    if type run >/dev/null 2>&1 ; then
        run
    else
        # otherwise, use a generic build
        generic || die "generic build for $name"
    fi

    msg "installing $name"

    # create pkg dir if it hasn't been already
    # bonsai uses this directory as a "database"
    mkdir -p "$PKGS/$pkg"

    # link
}

# Try to automagically build/install if a pkgfile doesn't
# define a custom run().  Works for most packages.
generic() {
    if [ -f configure ] ; then
        bcfg || return 1
    elif [ -f autogen.sh ] ; then
        sh autogen.sh || return 1
        bcfg || return 1
    fi
    if [ -f *akefile ] ; then
        bmk || return 1
        binst || return 1
    else
        return 1
    fi
}

# bonsai make function
bmk() {
    # * arguments supplied override vars within makefiles should they exist
    # * to enable verbose build output, you can set the $VERBOSE env var
    # * while non-standard, some makefiles use lowercase vars
    # * $MAKE variable is needed to enforce use of our $LIBTOOL
    #   because autotools doesn't play nice
    make -j"$JOBS" ${VERBOSE:+V=1} CC="$CC" CXX="$CXX" cc="$CC" cxx="$CXX" \
        LIBTOOL="$LIBTOOL" MAKE="make LIBTOOL='$LIBTOOL'" \
        PKG_CONFIG="$PKG_CONFIG" DESTDIR="$DESTDIR" PREFIX="$PREFIX" \
        BINDIR="$BINDIR" SBINDIR="$BINDIR" LIBDIR="$LIBDIR" \
        LIBEXECDIR="$LIBEXECDIR" DOCDIR="$DOCDIR" \
        destdir="$DESTDIR" prefix="$PREFIX" bindir="$BINDIR" \
        sbindir="$BINDIR" libdir="$LIBDIR" libexecdir="$LIBEXECDIR" \
        MAKEINFO=false "$@" || die "make $* failed for $name"
}

binst() {
    [ -f *akefile ] && bmk install
}

# Exports flags into the environment to be read by makefiles.
flags() {
    # Import user's flags and export them.
    isinst @cfg >/dev/null && . "$CONFIG"/build.cfg

    # If we're bootstrapping, we most likely will not
    # yet have slibtool or pkgconf.
    [ -x /bin/slibtool ] && LIBTOOL=/bin/slibtool
    [ -x /bin/pkgconf  ] && PKG_CONFIG=/bin/pkgconf

    # System flags
    export CC="${CC:-gcc}" CXX="${CXX:-g++}" cc="$CC" \
           LIBTOOL=${LIBTOOL:-libtool} PKG_CONFIG=${PKG_CONFIG:-pkg-config} \
           SHELL=/bin/sh DESTDIR="$PKGS/$pkg" PREFIX=/ prefix=/

    # User flags
    export JOBS=${JOBS:-1} CFLAGS LDFLAGS CPPFLAGS CXXFLAGS \
           LIBRARY_PATH LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH \
           BINDIR LIBDIR SBINDIR LIBEXECDIR MANDIR
}
