# -/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/- #
#                                                         #
#            #                                            #
#            #                        O                   #
#            ##, ,##,',##, ,##  ,#,   ,                   #
#            # # #  # #''# #,,  # #   #                   #
#            '#' '##' #  #  ,,# '##;, #                   #
#                                                         #
#                                                         #
#           global build configuration file               #
#                                                         #
# -/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/- #

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 1. Performance
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Optimization level
#
# -O0: fastest compile times
# -O2: strong performance optimizations
# -Os: enable all -O2 optimizations except which would enlarge binary size
# -Og: add extra debugging symbols
#
# see: http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
CFLAGS="$CFLAGS -O2"

# Use pipes over temporary files, (tends be faster than file I/O).
#
# see: http://wiki.gentoo.org/wiki/GCC_optimization#-pipe
CFLAGS="$CFLAGS -pipe"

# Smaller binary sizes under musl-libc.
#
# see: http://landley.net/toybox/#17-09-2013
CFLAGS="$CFLAGS -fasynchronous-unwind-tables"

# You may also wish to add -march optimization for your specific architecture.
#
# Be aware however, this will make the resulting binaries unportable
# between machines. As such, this is commented out by default.
#
# see: http://wiki.gentoo.org/wiki/Safe_CFLAGS
#CFLAGS="$CFLAGS -march=native"

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 2. Hardening
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Explicitly forbid execution on the stack.
#
# see: http://linux.die.net/man/8/execstack
CFLAGS="$CFLAGS -Wl,-z,noexecstack"

# Generate Position-Independent-Code for libraries.
# GCC will automatically use PIE for executables.
CFLAGS="$CFLAGS -fpic"

# Add stack canaries to functions.
#
# * protector: add to functions gcc believes to be vulnerable
# * protector-strong: add to all functions with arrays larger than 4 bytes
# * protector-all: add to ALL functions, regardless of arrays
#
# note: 'all' is generally considered a waste.
# see: http://wiki.osdev.org/Stack_Smashing_Protector
CFLAGS="$CFLAGS -fstack-protector-strong"

# Prevent stack clash attacks.
#
# see: http://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
CFLAGS="$CFLAGS -fstack-clash-protection"

# Enable return trampolines to help mitigate some variants of Spectre V2.
#
# see: http://stackoverflow.com/q/48089426
CFLAGS="$CFLAGS -mindirect-branch=thunk -mfunction-return=thunk"

# Check that target addresses are valid before changing flow control.
# Helps protect against ROP attacks.
#
# * branch: only branching
# * return: only returns
# * full: both
#
# see: http://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
CFLAGS="$CFLAGS -fcf-protection=full -mmitigate-rop"

# Full Read-Only Relocation
#
# * disable lazy library binding
# * makes shared libraries read-only after ASLR relocation
# * '-z,now', ("full" RELRO), marks entire Global Offset Table as read-only
# * prevents an attacker from gaining execution control through the GOT
#
# see: http://redhat.com/en/blog/hardening-elf-binaries-using-relocation-read-only-relro
# see: http://tk-blog.blogspot.com/2009/02/relro-not-so-well-known-memory.html
CFLAGS="$CFLAGS -Wl,-z,relro,-z,now"

# Reject undefined symbols at link time and forbid underlinking.
# Many attacks rely on taking control of these undefined symbols.
#
# This also allows you to see errors during the build
# rather than pushing a bug to occur at run time.
#
# see: http://bugzilla.mozilla.org/show_bug.cgi?id=333640
# see: http://wiki.rosalab.ru/ru/index.php/Underlinking#Why_underlinking_is_bad
CFLAGS="$CFLAGS -Wl,-z,defs"

# Enable buffer overflow checks.
#
# see: http://access.redhat.com/blogs/766093/posts/1976213
CPPFLAGS="$CPPFLAGS -D_FORTIFY_SOURCE=2"

# Enable bounds checking for strings as well as null pointer checks.
#
# see: http://gcc.gnu.org/onlinedocs/libstdc++/manual/using_macros.html
CPPFLAGS="$CPPFLAGS -D_GLIBCXX_ASSERTIONS"

# Error on exceeding of array boundaries
CFLAGS="$CFLAGS -Werror=array-bounds"

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 3. Warnings       (can be replaced with -Werror if you wish)
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Warn about format functions that present possible security vulnerabilities.
CFLAGS="$CFLAGS -Wformat -Wformat-security"

# Warn about implicitly declared functions, can cause undefined behavior.
CFLAGS="$CFLAGS -Wimplicit-function-declaration"

# Warn about signed<->unsigned conversion.
CFLAGS="$CFLAGS -Wconversion -Wsign-conversion"

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 4. Finishing up
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Use same flags for C++ as for C
CXXFLAGS="$CFLAGS"

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 5. Path variables - edit at your own risk
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
LIBRARY_PATH=".:$ROOT/lib:$ROOT/libexec"
LD_LIBRARY_PATH="$LIBRARY_PATH"
CPATH=".:$ROOT/include"
PKG_CONFIG_PATH="$ROOT/lib/pkgconfig:$ROOT/share/pkgconfig"
BINDIR="$PREFIX"/bin
LIBDIR="$PREFIX"/lib
MANDIR="$PREFIX"/share/man
SBINDIR="$BINDIR"
LIBEXECDIR="$LIBDIR"

# vim:ft=config
