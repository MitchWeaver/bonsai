# vi:syntax=sh
# shellcheck shell=sh

# 1. downloads, builds, and installs a port
# 2. --quiet can be provided to silence some messages
# params: [--quiet] $name
addpkg() {
    [ "$1" = --quiet ] && { nowarn=true ; shift ; }
    [ "$1" ] || die "addpkg(): no pkg given"
    is_empty "$ports" && die "addpkg(): no ports found"

    for pkg in $@ ; do
        isinst "$pkg" > /dev/null &&
            die "port $pkg is already installed"
    done
    
    # the packages asked to install
    main_packages="$*"
    # clear array, we will use it to build the list
    set --

    for mainpkg in $main_packages ; do
        # grab initial package variables
        load_pkgfile "$mainpkg"

        # search for dependencies, the value is stored in $pkgdeps
        pkgdeps "$mainpkg"

        # add deps to list, before the main package
        case "$pkgdeps" in
            # if deps is unset or empty string, there are no deps
            ""|"* *") ;;
            *) for dep in $pkgdeps ; do
                   isinst "$dep" > /dev/null || set -- "$* $dep"
               done
        esac
        set -- "$* $mainpkg"
        unload_pkgfile
    done

    if [ "$nowarn" != true ] ; then
        warn "these packages will be installed:"
        printf "\n  %s\n\n" "$*"
    fi

    # prompt user for confirmation before continuing
    confirm || return 1

    # main loop
    for pkg_to_add in $@ ; do
        # clear any work from previous build
        rm -rf "${work:?}" 2>/dev/null ||:

        # sanity check if not meta pkg
        ismetapkg "$pkg_to_add" || validate_gcc "$pkg_to_add"

        # load all pkgfile variables into environment
        load_pkgfile "$pkg_to_add"

        # check if is already installed
        if isinst "$name" >/dev/null ; then
            msg "port $name is already installed"
            unload_pkgfile
            continue
        fi

        # download / checksum / extract the package
        get "$pkg_to_add" || die "failed to get() to tarball"

        # continue if we've been instructed only to download the tarball
        [ "$DLONLY" ] && { unload_pkgfile ; continue ; }

        # create $pkgdir directory
        createpkgdir "$pkg_to_add" || die "failed to create $root/src/pkgs/$pkg_to_add"

        # build
        run_build || die "$pkg_to_add failed to build"

        # link and install
        installpkg "$pkg_to_add" || die "$pkg_to_add failed to install"

        # unload as not to persist from pkg to pkg
        unload_pkgfile
    done || die "failed to install $port"

    unset main_packages pkg dep nowarn
}

# 1) create the $pkgdir if needed with given $name
# 2) set a trap to remove it incase we are interrupted
#    this trap is unset at the end of installpkg()
# params: $name
createpkgdir() {
    if ! ismetapkg "$1" ; then
        mkdir -p "$pkgs/$1"
        trap 'rmdir $pkgs/$1' INT TERM
    fi
}

# 1) cleans up package
# 2) links it
# 3) adds to the database
# params: $name
# assumes: all pkgfile vars in the environment
installpkg() {
    # check again incase we weren't called via addpkg()
    if isinst "$1" >/dev/null ; then
        msg "port $1 is already installed"
        unload_pkgfile
        return 1
    fi

    if [ -d "$pkgs/$1" ] ; then
        clear_junk "$1"
        linkpkg "$1" || die "$1 failed to link"
    fi

    add_db "$1" "$version"
    msg "$1 installed!"

    # clear $pkgs tree of empty dirs and removes $work
    clean
    trap - INT TERM
}
