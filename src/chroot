# vi:syntax=sh
# shellcheck shell=sh

enter_chroot() {
    set +e
    get_sudo
    if already_chrooted > /dev/null ; then
        unmount_drives
        already_chrooted &&
            die "chroot was already mounted and unable to automatically unmount"
    fi
    get_chroot_shell

    cp -f /etc/resolv.conf "$root"/etc/resolv.conf
    _TERM="$TERM"
    _PS1="$PS1"
    export TERM=vt100 PS1="(chroot) % "

    # change whatever user had $root equal to
    # to root=/ in their bonsairc
    old_config_root="$(grep '^root=.*' "$bonsairc")"
    : "${old_config_root:="${HOME}/.local/bonsai"}"
    sed 's|^root=.*|root=/|' "$bonsairc" > "$bonsairc".tmp
    mv -f "$bonsairc".tmp "$bonsairc"

    mount_drives
    $SUDO chroot "$root" "$chroot_shell" -l -i
    unchroot
    set -e
}

# try to find a posix compatible shell who's symlink
# is correctly pointing to the correct root, (after chrooting)
# exports: $chroot_shell
get_chroot_shell() {
    set -- loksh mksh bash dash rc ksh zsh csh tcsh fish sh
    for shell ; do
        if [ -h "$root"/bin/$shell ] ; then
            chroot_shell="$(readlink "$root"/bin/$shell)"
            case "$chroot_shell" in
                /src/pkgs/$shell/bin/$shell|//src/pkgs/$shell/bin/$shell)
                    export chroot_shell
                    return
                    ;;
                *) warn "$shell exists but it is pointing to $chroot_shell"
                   die "You might want to --relink-world before chrooting in..."
            esac
        fi
    done
    warn "exhausted: $*"
    die "can't find a working shell?"
    unset shell
}

mount_drives() {
    get_sudo
    $SUDO mount -o bind -t devtmpfs /dev "$root"/dev || die 'Could not mount.'
    $SUDO mount -o bind -t devpts /dev/pts "$root"/dev/pts
    $SUDO mount -o bind -t proc /proc "$root"/proc
    $SUDO mount -o bind -t sysfs /sys "$root"/sys
}

unmount_drives() {
    get_sudo
    tryumount() {
        path="$1"
        if ! $SUDO umount "$path" 2> /dev/null ; then
            msg "umount ${path} failed... trying to umount -f"
            sleep 1
            if ! $SUDO umount -f "$path" 2> /dev/null ; then
                msg "umount -f ${path} failed... trying to umount -l"
                sleep 1
                if ! $SUDO umount -l "$path" 2> /dev/null ; then
                    warn "WARNING: could  not umount -l ${path}!"
                fi
            fi
        fi
    }
    tryumount "$root"/dev/pts
    tryumount "$root"/dev
    tryumount "$root"/proc
    tryumount "$root"/sys
    unset -f tryumount
}

unchroot() {
    get_sudo
    unmount_drives
    if already_chrooted ; then
        unmount_drives
        already_chrooted && warn "was unable to automatically unmount chroot!"
    fi
    export TERM="$_TERM" PS1="$_PS1"

    # restore the users config
    sed "s|^root=.*|$old_config_root|" "$bonsairc" > "$bonsairc".tmp
    mv -f "$bonsairc".tmp "$bonsairc"

    $SUDO chown -R "$USER" "${root:?}"

    msg 'exited chroot!'
}

# check if drives have already been mounted
already_chrooted() {
    [ "$(ls -A "$root"/dev/pts 2> /dev/null)" ] || return 1
    warn "the chroot has already been mounted!"
}
