# vi:syntax=sh
# shellcheck shell=sh

msg()  {
    [ "$1" ] || { set -f ; read -r inp && set $inp ; set +f ; }
    printf "%s\n" "$prompt $*"
}
msg_no_nl() { printf "%s" "$prompt $*" ; }
die()  { >&2 msg "error: $*" ; exit 1 ; }
warn() { >&2 msg "warning: $*" ; }

usage() {
printf "%s\n" \
"bonsai pkg mgr
 
commands:
-----------
add    | -a
del    | -d
relink | -r
search | -s
info   | -i
list   | -l
print  | -p
count  | -c
deps isinst
pack unpack
chroot skel
relink-world"
}

# checks if a function is defined
# params: $func_name(s)
defined() {
    for _a ; do
        case "$(type "$_a")" in
            *" function"*) ;;
            *) return 1
        esac
    done
}
# checks if a command exists
# params: $command_name(s)
has() { for _a ; do type "$_a" >/dev/null || return 1 ; done ; }

# checks if command exists, exiting if not found
# params: caller func, progs to check
requires() {
    f="$1"
    shift
    for _p ; do
        has $_p || die "$_p not found in \$PATH but is required for $f"
    done
}

# check if dir is empty
# returns: 0 if true, 1 if false or not a dir
is_empty() { rmdir "$1" 2>/dev/null && mkdir -p "$1" || return 1 ; }

# params: $path
# returns: 0 if path is a symlink and target exists
test_link() { if [ ! -L "$1" ] || [ ! -e "$1" ] ; then return 1 ; fi }

# --- some coreutils in posix sh builtins ---
basename() { printf "%s\n" "${1##*/}" ; }
dirname()  { printf "%s\n" "${1%/*}"  ; }

# print out a file
# 200%+ speed increase on small files
shellcat() { while IFS="" read -r _l ; do printf "%s\n" "$_l" ; done < "$1" ; }

# print first line of a file
# 3000%+ speed increase on small files
headn1() { read -r _l < "$1" ; printf "%s\n" "$_l" ; }
# -------------------------------------------

# checks if a given string contains another
# params: full_string, partial_string
contains() { [ "${1#*$2}" != "$1" ] || return 1 ; }

# prompts user for confirmation
# returns 1 on 'n' or bad input
# params: message to be printed
confirm() {
    if [ -z "$NO_PROMPT" ] ; then
        msg_no_nl "$confirm_prompt"
        read -r ans
        case "$ans" in
            y|"") ;; # "" is equivalent to user pressing enter
            *) return 1
        esac
    fi
}

# test if our gcc is sane
# if it isn't, disregard if its one of the following packages
# otherwise error out appropriately
# params: $name we're trying to add
validate_gcc() {
    if ! test_link "$root"/bin/gcc ; then
        case "$1" in
            *gcc*|@stage0|@fs|bonsai) ;;
            *) [ -e "$gcc" ] && die "No compiler toolchain installed."
               err_bad_links
        esac
    fi
}

print_logo() {
printf "%b\n" \
"
    \033[32m,####,
   \033[32m#######,  \033[32m,#####,
   \033[32m#####',#  \033[32m'######
    \033[32m''###'\033[33m';,,,'\033[32m###'
   \033[33m       ,;  ''''
   \033[33m      ;;;   \033[32m,#####,
   \033[33m     ;;;'  ,,;\033[32m;;###
   \033[33m     ';;;;''\033[32m'####'
   \033[33m      ;;;
   \033[33m   ,.;;';'',,,
   \033[33m  '     '\033[0m"
}
