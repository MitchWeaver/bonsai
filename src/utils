# vi:syntax=sh
# shellcheck shell=sh

msg()  {
    [ -z "$1" ] && read -r input && set -- "$input"
    printf "%s\n" "$prompt $*"
}
msg_no_nl() { printf "%s" "$prompt $*" ; }
die()  { >&2 msg "error: $*" ; exit 1 ; }
warn() { >&2 msg "warning: $*" ; }

usage() {
printf "%s\n" \
"bonsai pkg mgr
 
commands:
-----------
add    | -a
del    | -d
relink | -r
search | -s
info   | -i
list   | -l
print  | -p
count  | -c
deps isinst
pack unpack
chroot skel
relink-world"
}

# checks if a function is defined
# params: $func_name(s)
defined() {
    for _arg ; do
        case "$(type "$_arg")" in
            *" function"*) ;;
            *) return 1
        esac
    done
    unset _arg
}
# checks if a command exists
# params: $command_name(s)
has() { 
    for _arg ; do
        type "$_arg" || return 1
    done > /dev/null 2>&1
    unset _arg
}
# checks if command exists, exiting if not found
# params: caller func, progs to check
requires() {
    func="$1"
    shift
    for _prog ; do
        has $_prog || die "$_prog not found in \$PATH but is required for $func"
    done
}

# check if dir is empty
# params: dir
# return: 0 if true, 1 if false or not a dir
is_empty() {
    if rmdir "$1" 2> /dev/null ; then
        mkdir "$1"
        return
    else
        return 1
    fi
}

# params: $path
# return: 0 if path is a symlink and target exists
test_link() {
    if [ ! -L "$1" ] || [ ! -e "$1" ]; then
        return 1
    fi
}

# --- some coreutils in posix sh builtins ---
basename() { printf "%s\n" "${1##*/}" ; }
dirname()  { printf "%s\n" "${1%/*}"  ; }

# print out a file
# 200%+ speed increase on small files
shellcat() {
    while IFS="" read -r _line ; do
        printf "%s\n" "$_line"
    done < "$1"
    unset _line
}

# print first line of a file
# 3000%+ speed increase on small files
headn1() {
    read -r _line < "$1"
    printf "%s\n" "$_line"
    unset _line
}
# -------------------------------------------

# checks if a given string contains another
# params: full_string, partial_string
contains() { [ "${1#*$2}" != "$1" ] || return 1 ; }

# prompts user for confirmation
# returns 1 on 'n' or bad input
# params: message to be printed
confirm() {
    if [ -z "$NO_PROMPT" ] ; then
        msg_no_nl "$confirm_prompt"
        read -r ans
        case "$ans" in
            y|"") ;; # "" is equivalent to user pressing enter
            *) return 1
        esac
        unset ans
    fi
}

# test if our gcc is sane
# if it isn't, disregard if its one of the following packages
# otherwise error out appropriately
# params: $name we're trying to add
validate_gcc() {
    if ! test_link "$root"/bin/gcc ; then
        case $1 in
            *gcc*|bonsai-core|bonsai-fs|bonsai) ;;
            *) 
                if [ -e "$gcc" ] ; then
                    die "No compiler toolchain has yet been installed."
                else
                    err_bad_links
                fi
        esac
    fi
}

# check variables are still sane before operations
sanity_check() {
    [ -d "$root"     ]   || die "\$root is not a directory"
    [ -d "$bonsaihome" ] || die "\$bonsaihome is not a directory"
    [ -d "$pkgs"     ]   || die "\$pkgs is not a directory"
    [ -d "$ports"    ]   || die "\$ports is not a directory"
    [ -d "$sources"  ]   || die "\$sources is not a directory"
    [ -r "$bonsaidb" ]   || die "\$bonsaidb is not readable"
    [ "$delim"       ]   || die "\$delim is not set"
    [ "$gcc"         ]   || warn "\$gcc is not set"
    mkdir -p "$bonsaihome" "$pkgs" "$ports" "$sources" "$work"
}

get_sudo() {
    if has sudo ; then
        SUDO=sudo
    elif has doas ; then
        SUDO=doas
    else
        die "sudo or doas is needed by bonsai but neither found in \$PATH."
    fi
    export SUDO
}

print_logo() {
printf "%b\n" \
"
    \033[32m,####,
   \033[32m#######,  \033[32m,#####,
   \033[32m#####',#  \033[32m'######
    \033[32m''###'\033[33m';,,,'\033[32m###'
   \033[33m       ,;  ''''
   \033[33m      ;;;   \033[32m,#####,
   \033[33m     ;;;'  ,,;\033[32m;;###
   \033[33m     ';;;;''\033[32m'####'
   \033[33m      ;;;
   \033[33m   ,.;;';'',,,
   \033[33m  '     '\033[0m"
}
