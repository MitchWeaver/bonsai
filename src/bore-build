# runs build() method inside a pkgfile! -name readme 
# params: $name
run_build() { 
    getflags
    GNU_sucks

    msg "building $name..."

    if defined prebuild ; then
        prebuild || die "$1 prebuild() failed"
    else # else, try to apply any patches (convenience)
        patch || die "$1 generic prebuild() failed"
    fi

    # run user defined build(), if exists
    if defined build ; then
        build || die "$1 build() failed"
    else
        generic_build || die "$1 generic_build() failed"
    fi

    # run user defined postbuild(), if exists
    if defined postbuild ; then
        postbuild || die "$1 postbuild() failed"
    fi

    # unset in case we are adding multiple packages
    unset -f prebuild build postbuild
}

# convenience functions
cc() { $cc "$@" ; }
gcc() { $gcc "$@" ; }

getflags() {
    . "$root"/etc/profile
    LIBRARY_PATH=".:$root/lib:$root/libexec"
    CPATH=".:$root/include"
    CFLAGS="$CFLAGS $cflags"
    LDFLAGS="$LDFLAGS $ldflags"
    CPPFLAGS="$CPPFLAGS $cppflags"
    CXXFLAGS="$CXXFLAGS $cxxflags"
    PREFIX="$pkgs/$name"
    prefix="$PREFIX"
    DESTDIR=''
    BINDIR="$PREFIX/bin"
    INCLUDEDIR="$PREFIX/include"
    LIBDIR="$PREFIX/lib"
    LIBEXECDIR="$PREFIX/libexec"
    MANDIR="$PREFIX/share/man"
    PRESERVEDIR="$root/var/preserve"
    cc="${cc:=$gcc}"
    CC="${cc:=$cc}"
    export LIBRARY_PATH CPATH \
           CFLAGS LDFLAGS CPPFLAGS CXXFLAGS CC cc \
           PREFIX prefix DESTDIR BINDIR INCLUDEDIR \
           LIBDIR LIBEXECDIR MANDIR PRESERVEDIR
}

# convenience function, tries to find all *.patch
# in $work/$name directory and apply them
patch() {
    find . ! -name . -prune -name "*.patch" | while read -r patch ; do
        command patch -p0 < "$patch" | msg
    done
    unset patch
}

autogen() { configure --autogen ; }

configure() {
    if [ "$1" = "--autogen" ] ; then
        FILE=autogen.sh
        shift
    else
        FILE=configure
    fi

    ! $docs  && _docs="--disable-docs \
                           --disable-gtk-docs \
                           --disable-gtk-docs-html"
    ! $nls   && _nls='--disable-nls'
    ! $debug && _debug='--disable-debug --disable-debugger'
    $quiet   && _quiet='--silent --quiet'

    if [ -f configure ] ; then
        # try to enable as many options as possible
        # if they are allowed in the configure script
        allowed=""
        tmp_help=/tmp/$PKG_MGR_NAME-$$.tmp
        ./configure --help > "$tmp_help"

        for flag in --static --enable-static --enable-static-link \
                    --disable-rpath --disable-option-checking --without-tests \
                    --disable-dependency-tracking --without-ada --without-shared \
                    $_quiet $_debug $_nls $_docs ; do
            grep -- "$flag" "$tmp_help" > /dev/null && allowed="$allowed $flag"
        done

        grep -- --enable-shared "$tmp_help" > /dev/null &&
            allowed="$allowed --disable-shared"
        grep -- --enable-tests "$tmp_help" > /dev/null &&
            allowed="$allowed --disable-tests"
        grep -- --with-debug "$tmp_help" > /dev/null &&
            allowed="$allowed --without-debug"
        grep -- --with-tests "$tmp_help" > /dev/null &&
            allowed="$allowed --without-tests"

        rm -f "$tmp_help"
        __prefix="--prefix=$PREFIX"
    fi

    set -- "$__prefix" "$allowed" "$@"
    ./$FILE "$*"

    set $?
    unset allowed flag tmp_help _docs _nls \
          _debug _quiet __prefix FILE
    return "$1"
}

make() {
    ! $mans && _docs="MANPREFIX=/dev/null MANDIR=/dev/null"
    $quiet  && _quiet='-s'

    # note: multiple '=-j1' here are nops as strings cannot be empty
    #       or else make interprets them as files for some reason
    command make "${makeflags:=-j1}" -j"${jobs:=1}" "${_docs:=-j1}" "${_quiet:=-j1}" \
        CC="$CC" \
        cc="$CC" \
        DESTDIR="$DESTDIR" \
        PREFIX="$PREFIX" \
        prefix="$PREFIX" \
        BINDIR="$BINDIR" \
        INCLUDEDIR="$INCLUDEDIR" \
        LIBDIR="$LIBDIR" \
        LIBEXECDIR="$LIBEXECDIR" \
        MANDIR="$MANDIR" \
        PRESERVEDIR="$PRESERVEDIR" "$@"

    set $?
    unset _quiet _docs
    return "$1"
}

# run if pkgfile doesn't define a custom build()
generic_build() {
    if [ -f configure ] ; then
        configure
    elif [ -f autogen.sh ] ; then
        autogen
        configure
    fi
    make
    make install
}

# remove junk files
# params: $name
clear_junk() {
    [ -d "$pkgs/$1/share/info" ] && rm -r "$pkgs/$1/share/info"
    if ! $docs && [ -d "$pkgs/$1/share/doc" ] ; then
        rm -r "$pkgs/$1/share/doc"
    fi
    if ! $mans && [ -d "$pkgs/$1/share/man" ] ; then
        rm -r "$pkgs/$1/share/man"
    fi
}
# vi:syntax=sh
# shellcheck shell=sh
